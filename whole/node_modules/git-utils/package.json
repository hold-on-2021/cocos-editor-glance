{
  "_args": [
    [
      {
        "raw": "git-utils@4.0.5",
        "scope": null,
        "escapedName": "git-utils",
        "name": "git-utils",
        "rawSpec": "4.0.5",
        "spec": "4.0.5",
        "type": "version"
      },
      "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app"
    ]
  ],
  "_cnpm_publish_time": 1442899026962,
  "_from": "git-utils@4.0.5",
  "_hasShrinkwrap": false,
  "_id": "git-utils@4.0.5",
  "_location": "/git-utils",
  "_nodeVersion": "0.12.0",
  "_npmUser": {
    "name": "zcbenz",
    "email": "zcbenz@gmail.com"
  },
  "_npmVersion": "2.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git-utils@4.0.5",
    "scope": null,
    "escapedName": "git-utils",
    "name": "git-utils",
    "rawSpec": "4.0.5",
    "spec": "4.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/git-utils/download/git-utils-4.0.5.tgz",
  "_shasum": "8d67117522aaa359cc4524b040b560cab61af130",
  "_shrinkwrap": null,
  "_spec": "git-utils@4.0.5",
  "_where": "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app",
  "author": {
    "name": "Kevin Sawicki",
    "email": "kevin@github.com"
  },
  "bugs": {
    "url": "https://github.com/atom/git-utils/issues"
  },
  "contributors": [
    {
      "name": "Garen J. Torikian",
      "email": "gjtorikian@gmail.com"
    }
  ],
  "dependencies": {
    "fs-plus": "^2.1.0",
    "nan": "^2.0.0"
  },
  "description": "A package for using Git repositories",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.6",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-shell": "~0.2.1",
    "jasmine-focused": "^1.0.4",
    "node-cpplint": "~0.1.5",
    "temp": "~0.5.0",
    "underscore": "~1.5.2",
    "wrench": "~1.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "8d67117522aaa359cc4524b040b560cab61af130",
    "size": 3708071,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/git-utils/download/git-utils-4.0.5.tgz"
  },
  "gitHead": "33d45f33fb0435e94c55ce7e74f00577fdc0a428",
  "gypfile": true,
  "homepage": "http://atom.github.io/git-utils",
  "keywords": [
    "git",
    "libgit2",
    "dvcs",
    "vcs"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/git-utils/raw/master/LICENSE.md"
    }
  ],
  "main": "./lib/git.js",
  "maintainers": [
    {
      "name": "as-cii",
      "email": "me@as-cii.com"
    },
    {
      "name": "atom-team",
      "email": "atom@github.com"
    },
    {
      "name": "benogle",
      "email": "ogle.ben@gmail.com"
    },
    {
      "name": "damieng",
      "email": "damieng@github.com"
    },
    {
      "name": "daviwil",
      "email": "daviwil@github.com"
    },
    {
      "name": "izuzak",
      "email": "izuzak@gmail.com"
    },
    {
      "name": "joshaber",
      "email": "joshaber@gmail.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "maxbrunsfeld",
      "email": "maxbrunsfeld@gmail.com"
    },
    {
      "name": "nathansobo",
      "email": "nathan@github.com"
    },
    {
      "name": "probablycorey",
      "email": "probablycorey@gmail.com"
    },
    {
      "name": "zcbenz",
      "email": "zcbenz@gmail.com"
    }
  ],
  "name": "git-utils",
  "optionalDependencies": {},
  "publish_time": 1442899026962,
  "readme": "# Git Node module [![Build Status](https://travis-ci.org/atom/git-utils.svg?branch=master)](https://travis-ci.org/atom/git-utils)\n\nHelpers for working with Git repositories built natively on top of\n[libgit2](http://libgit2.github.com).\n\n## Installing\n\n```sh\nnpm install git-utils\n```\n\n## Building\n  * Clone the repository with the `--recurse` option to get the libgit2\n    submodule\n  * Run `npm install`\n  * Run `grunt` to compile the native and CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Docs\n\n### git.open(path)\n\nOpen the repository at the given path.  This will return `null` if the\nrepository at the given path does not exist or cannot be opened.\n\n```coffeescript\ngit = require 'git-utils'\n\nrepository = git.open('/Users/me/repos/node')\n```\n\nThe opened repository will have a `submodules` property that will be an object\nof paths mapped to submodule {Repository} objects. The path keys will be\nrelative to the opened repository's working directory.\n\n### Repository.checkoutHead(path)\n\nRestore the contents of a path in the working directory and index to the\nversion at HEAD. Similar to running `git reset HEAD -- <path>` and then a\n`git checkout HEAD -- <path>`.\n\n`path` - The string repository-relative path to checkout.\n\nReturns `true` if the checkout was successful, `false` otherwise.\n\n### Repository.checkoutReference(reference, [create])\n\nChecks out a branch in your repository.\n\n`reference` - The string reference to checkout\n`create` - A Boolean value which, if `true` creates the new `reference` if it doesn't exist.\n\nReturns `true` if the checkout was successful, `false` otherwise.\n\n### Repository.getAheadBehindCount(branch)\n\nGet the number of commits the branch is ahead/behind the remote branch it\nis tracking.  Similar to the commit numbers reported by `git status` when a\nremote tracking branch exists.\n\n`branch` - The branch name to lookup ahead/behind counts for. (default: `HEAD`)\n\nReturns an object with `ahead` and `behind` keys pointing to integer values\nthat will always be >= 0.\n\n### Repository.getCommitCount(fromCommit, toCommit)\n\nGet the number of commits between `fromCommit` and `toCommit`.\n\n`fromCommit` - The string commit SHA-1 to start the rev walk at.\n\n`toCommit` - The string commit SHA-1 to end the rev walk at.\n\nReturns the number of commits between the two, always >= 0.\n\n### Repository.getConfigValue(key)\n\nGet the config value of the given key.\n\n`key` - The string key to retrieve the value for.\n\nReturns the configuration value, may be `null`.\n\n### Repository.setConfigValue(key, value)\n\nGet the config value of the given key.\n\n`key` - The string key to set in the config.\n\n`value` - The string value to set in the config for the given key.\n\nReturns `true` if setting the config value was successful, `false` otherwise.\n\n### Repository.getDiffStats(path)\n\nGet the number of lines added and removed comparing the working directory\ncontents of the given path to the HEAD version of the given path.\n\n`path` - The string repository-relative path to diff.\n\nReturns an object with `added` and `deleted` keys pointing to integer values\nthat always be >= 0.\n\n### Repository.getHeadBlob(path)\n\nGet the blob contents of the given path at HEAD. Similar to\n`git show HEAD:<path>`.\n\n`path` - The string repository-relative path.\n\nReturns the string contents of the HEAD version of the path.\n\n### Repository.getHead()\n\nGet the reference or SHA-1 that HEAD points to such as `refs/heads/master`\nor a full SHA-1 if the repository is in a detached HEAD state.\n\nReturns the string reference name or SHA-1.\n\n### Repository.getIndexBlob(path)\n\nGet the blob contents of the given path in the index. Similar to\n`git show :<path>`.\n\n`path` - The string repository-relative path.\n\nReturns the string contents of the index version of the path.\n\n### Repository.getLineDiffs(path, text, [options])\n\nGet the line diffs comparing the HEAD version of the given path and the given\ntext.\n\n`path` - The string repository-relative path.\n\n`text` - The string text to diff the HEAD contents of the path against.\n\n`options` - An optional object with the following keys:\n\n  * `ignoreEolWhitespace` - `true` to ignore any whitespace diffs at the end of\n    lines.\n  * `useIndex` - `true` to compare against the index version instead of the HEAD\n    version.\n\nReturns an array of objects that have `oldStart`, `oldLines`, `newStart`, and\n`newLines` keys pointing to integer values, may be `null` if the diff fails.\n\n### Repository.getLineDiffDetails(path, text, [options])\n\nGet the line diff details comparing the HEAD version of the given path and the given\ntext.\n\nTakes the same arguments as `getLineDiffs`.\n\nReturns an array of objects which represent an old or new line in a diff. Every\nobject has `oldStart`, `oldLines`, `newStart`, `newLines`, `oldLineNumber` and\n`newLineNumber` keys pointing to integer values, and a `line` key pointing to the\nrespective line content. May be `null` if the diff fails.\n\n### Repository.getMergeBase(commit1, commit2)\n\nGet the merge base of two commits.\n\n`commit1` - The string SHA-1 of the first commit.\n\n`commit2` - The string SHA-1 of the second commit.\n\nReturns the string SHA-1 of the merge base of `commit1` and `commit2` or `null`\nif there isn't one.\n\n### Repository.getPath()\n\nGet the path of the repository.\n\nReturns the string absolute path of the opened repository.\n\n### Repository.getReferences()\n\nGets all the local and remote references.\n\nReturns an object with three keys: `heads`, `remotes`, and `tags`.\nEach key can be an array of strings containing the reference names.\n\n### Repository.getReferenceTarget(ref)\n\nGet the target of the given reference.\n\n`ref` - The string reference.\n\nReturns the string target of the given reference.\n\n### Repository.getShortHead()\n\nGet a possibly shortened version of value returns by `getHead()`. This will\nremove leading segments of `refs/heads`, `refs/tags`, or `refs/remotes` and will\nalso shorten the SHA-1 of a detached HEAD to 7 characters.\n\nReturns a string shortened reference name or SHA-1.\n\n### Repository.getStatus([path])\n\nGet the status of a single path or all paths in the repository.  This will not\ninclude ignored paths.\n\n`path` - An optional repository-relative path to limit the status reporting to.\n\nReturns an integer status number if a path is specified and returns an object\nwith path keys and integer status values if no path is specified.\n\n### Repository.getUpstreamBranch([branch])\n\nGet the upstream branch of the given branch.\n\n`branch` - The branch to find the upstream branch of (default: `HEAD`)\n\nReturns the string upstream branch reference name.\n\n### Repository.getWorkingDirectory()\n\nGet the working directory of the repository.\n\nReturns the string absolute path to the repository's working directory.\n\n### Repository.isIgnored(path)\n\nGet the ignored status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is ignored, `false` otherwise.\n\n### Repository.isPathModified(path)\n\nGet the modified status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is modified, `false` otherwise.\n\n### Repository.isPathNew(path)\n\nGet the new status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is new, `false` otherwise.\n\n### Repository.isPathDeleted(path)\n\nGet the deleted status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is deleted, `false` otherwise.\n\n### Repository.isPathStaged(path)\n\nGet the staged status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is staged in the index, `false` otherwise.\n\n### Repository.isStatusIgnored(status)\n\nCheck if a status value represents an ignored path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a ignored one, `false` otherwise.\n\n### Repository.isStatusModified(status)\n\nCheck if a status value represents a modified path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a modified one, `false` otherwise.\n\n### Repository.isStatusNew(status)\n\nCheck if a status value represents a new path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a new one, `false` otherwise.\n\n### Repository.isStatusDeleted(status)\n\nCheck if a status value represents a deleted path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a deleted one, `false` otherwise.\n\n### Repository.isStatusStaged(status)\n\nCheck if a status value represents a changed that is staged in the index.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a staged one, `false` otherwise.\n\n### Repository.isSubmodule(path)\n\nCheck if the path is a submodule in the index.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is a submodule, `false` otherwise.\n\n### Repository.refreshIndex()\n\nReread the index to update any values that have changed since the last time the\nindex was read.\n\n### Repository.relativize(path)\n\nRelativize the given path to the repository's working directory.\n\n`path` - The string path to relativize.\n\nReturns a repository-relative path if the given path is prefixed with the\nrepository's working directory path.\n\n### Repository.isWorkingDirectory(path)\n\nIs the given path the repository's working directory?\n\nIt is better to call this method than comparing a path directly against\nthe value of `getWorkingDirectory()` since this method handles slash\nnormalization on Windows, case insensitive filesystems, and symlinked\nrepositories.\n\n`path` - The string path to check.\n\nReturns `true` if the given path is the repository's working directory,\nfalse otherwise.\n\n### Repository.release()\n\nRelease the repository and close all file handles it has open.  No other methods\ncan be called on the `Repository` object once it has been released.\n\n### Repository.submoduleForPath(path)\n\nGet the repository for the submodule that the path is located in.\n\n`path` - The absolute or repository-relative string path.\n\nReturns a `Repository` or `null` if the path isn't in a submodule.\n\n### Repository.add(path)\n\nStage the changes in `path` into the repository's index. Clear any conflict state\nassociated with `path`.\n\n`path` - A repository-relative string path.\n\nRaises an `Error` if the path isn't readable or if another exception occurs.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/git-utils.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "prepublish": "grunt clean coffee lint",
    "test": "grunt test"
  },
  "version": "4.0.5"
}
