{
  "_args": [
    [
      {
        "raw": "gulp-rev-all@github:cocos-creator/gulp-rev-all",
        "scope": null,
        "escapedName": "gulp-rev-all",
        "name": "gulp-rev-all",
        "rawSpec": "github:cocos-creator/gulp-rev-all",
        "spec": "github:cocos-creator/gulp-rev-all",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:cocos-creator/gulp-rev-all.git",
          "sshUrl": "git+ssh://git@github.com/cocos-creator/gulp-rev-all.git",
          "httpsUrl": "git+https://github.com/cocos-creator/gulp-rev-all.git",
          "gitUrl": "git://github.com/cocos-creator/gulp-rev-all.git",
          "shortcut": "github:cocos-creator/gulp-rev-all",
          "directUrl": "https://raw.githubusercontent.com/cocos-creator/gulp-rev-all/master/package.json"
        }
      },
      "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app"
    ]
  ],
  "_from": "cocos-creator/gulp-rev-all",
  "_id": "gulp-rev-all@0.9.8",
  "_inCache": true,
  "_location": "/gulp-rev-all",
  "_phantomChildren": {
    "clone-stats": "0.0.1",
    "core-util-is": "1.0.2",
    "dateformat": "1.0.12",
    "escape-string-regexp": "1.0.5",
    "has-color": "0.1.7",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "lodash._escapehtmlchar": "2.4.1",
    "lodash._escapestringchar": "2.4.1",
    "lodash._isnative": "2.4.1",
    "lodash._reunescapedhtml": "2.4.1",
    "lodash._shimkeys": "2.4.1",
    "lodash.defaults": "2.4.1",
    "lodash.isobject": "2.4.1",
    "lodash.values": "2.4.1",
    "object-keys": "0.4.0",
    "string_decoder": "0.10.31"
  },
  "_requested": {
    "raw": "gulp-rev-all@github:cocos-creator/gulp-rev-all",
    "scope": null,
    "escapedName": "gulp-rev-all",
    "name": "gulp-rev-all",
    "rawSpec": "github:cocos-creator/gulp-rev-all",
    "spec": "github:cocos-creator/gulp-rev-all",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:cocos-creator/gulp-rev-all.git",
      "sshUrl": "git+ssh://git@github.com/cocos-creator/gulp-rev-all.git",
      "httpsUrl": "git+https://github.com/cocos-creator/gulp-rev-all.git",
      "gitUrl": "git://github.com/cocos-creator/gulp-rev-all.git",
      "shortcut": "github:cocos-creator/gulp-rev-all",
      "directUrl": "https://raw.githubusercontent.com/cocos-creator/gulp-rev-all/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/cocos-creator/gulp-rev-all.git#5f221a506b167f2e16422a7d1d2382b364f55945",
  "_shasum": "07ab4bac80c08c2219e958907e9940196b6b974b",
  "_shrinkwrap": null,
  "_spec": "gulp-rev-all@github:cocos-creator/gulp-rev-all",
  "_where": "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app",
  "author": {
    "name": "Joshua Bellamy-Henn",
    "email": "josh@psidox.com"
  },
  "bugs": {
    "url": "https://github.com/smysnk/gulp-rev-all/issues"
  },
  "dependencies": {
    "chalk": "~0.4.0",
    "gulp-util": "~2.2.14",
    "merge": "^1.2.0",
    "through2": "~0.4.0"
  },
  "description": "Static asset revisioning by appending content hash to filenames: unicorn.css => unicorn.098f6bcd.css, also re-writes references in each file to new reved name.",
  "devDependencies": {
    "event-stream": "^3.3.4",
    "gulp": "~3.9.1",
    "gulp-jshint": "~1.5.1",
    "gulp-mocha": "~2.2.0",
    "mocha": "~2.2.1",
    "should": "*"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "5f221a506b167f2e16422a7d1d2382b364f55945",
  "homepage": "https://github.com/smysnk/gulp-rev-all",
  "keywords": [
    "gulp-rev",
    "gulp-rev-all",
    "gulpplugin",
    "rev",
    "all",
    "revision",
    "hash",
    "optimize",
    "version",
    "versioning",
    "cache",
    "expire",
    "static",
    "asset",
    "assets",
    "aws",
    "s3",
    "cloudfront",
    "cdn"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-rev-all",
  "optionalDependencies": {},
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-rev-all [![Build Status](https://travis-ci.org/smysnk/gulp-rev-all.png?branch=master)](https://travis-ci.org/smysnk/gulp-rev-all)\n\n> Static asset revisioning with dependency considerations, appends content hash to each filename (eg. unicorn.css => unicorn.098f6bcd.css), re-writes references.\n\n\n## Purpose\n\nBy using the HTTP server response header ``expires`` combined with filename revisioning, static assets can be made cacheable for extended periods of time. Returning visitors will have the assets cached for super fast load times.\n\nAdditionally, content distribution networks like [CloudFront](http://aws.amazon.com/cloudfront/) let you cache static assets in [Edge Locations](http://aws.amazon.com/about-aws/globalinfrastructure/) for extended periods of time.\n\n\n## Why fork?\n\nThis project was forked from [gulp-rev](https://github.com/sindresorhus/gulp-rev) to add reference processing and rewriting functionality.  \nIt is the philosophy of `gulp-rev` that concerns should be seperated between revisioning the files and re-writing references to those files.  `gulp-rev-all` does not agree with this, we believe you need to analyze each revisioned files' references, to calculate a final hash for caching purposes.  \n\n### Consider the following example:\nA css file makes reference to an image.  If the image changes, the hash of the css file remains the same since its contents have not changed.  Web clients that have previously cached this css file will not correctly resolve the new image.\nIf we take in to consideration the dependency graph while calculating the css file hash, we can have it change if any of its child references have changed.\n\nSo to recap, `gulp-rev-all` not only handles reference re-writing but it also takes child references into consideration when calculating a hashes.\n\n## Install\n\nInstall with [npm](https://npmjs.org/)\n\n```\nnpm install --save-dev gulp-rev-all\n```\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar RevAll = require('gulp-rev-all');\n\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision())\n    .pipe(gulp.dest('cdn'));\n\n});\n```\n\n\n```js\nvar gulp = require('gulp');\nvar RevAll = require('gulp-rev-all');\nvar awspublish = require('gulp-awspublish');\nvar cloudfront = require(\"gulp-cloudfront\");\n\nvar aws = {\n  \"params\": {\n  \"Bucket\": \"bucket-name\"\n  },\n  \"accessKeyId\": \"AKIAI3Z7CUAFHG53DMJA\",\n  \"secretAccessKey\": \"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\",\n  \"distributionId\": \"E1SYAKGEMSK3OD\",\n  \"region\": \"us-standard\",\n};\n\nvar publisher = awspublish.create(aws);\nvar headers = {'Cache-Control': 'max-age=315360000, no-transform, public'};\n\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision())\n    .pipe(awspublish.gzip())\n    .pipe(publisher.publish(headers))\n    .pipe(publisher.cache())\n    .pipe(awspublish.reporter())\n    .pipe(cloudfront(aws));\n\n});\n```\n  * See [gulp-awspublish](https://www.npmjs.org/package/gulp-awspublish), [gulp-cloudfront](https://www.npmjs.org/package/gulp-cloudfront)\n\n## Methods\n\n### .revision({ options })\nReturns a transform function that can be used to pipe files through so that they may be revisioned, also corrects refererences to said files.\n\n### .manifestFile()\nReturns a transform function that will filter out any existing files going through the pipe and will emit a new manifest file.  Must be called after `.revision()`.\n\n```js\nvar gulp = require('gulp');\nvar RevAll = require('gulp-rev-all');\n\ngulp.task('default', function () {\n\n  return gulp\n    .src(['assets/**'])\n    .pipe(gulp.dest('build/assets'))  \n    .pipe(RevAll.revision())\n    .pipe(gulp.dest('build/assets'))  \n    .pipe(RevAll.manifestFile())\n    .pipe(gulp.dest('build/assets')); \n\n});\n```\n\nAn asset manifest, mapping the original paths to the revisioned paths, will be written to `build/assets/rev-manifest.json`:\n\n```json\n{\n  \"css/unicorn.css\": \"css/unicorn.098f6bcd.css\",\n  \"js/unicorn.js\": \"js/unicorn.273c2cin.js\"\n}\n```\n\n### .versionFile()\nReturns a transform function that will filter out any existing files going through the pipe and will emit a new version file.  Must be called after `.revision()`.\n\n```js\nvar gulp = require('gulp');\nvar RevAll = require('gulp-rev-all');\n\ngulp.task('default', function () {\n\n  return gulp\n    .src(['assets/**'])\n    .pipe(gulp.dest('build/assets'))\n    .pipe(RevAll.revision())\n    .pipe(gulp.dest('build/assets'))\n    .pipe(RevAll.versionFile())\n    .pipe(gulp.dest('build/assets'));\n\n});\n```\n\nThe version file will contain the build date and a combined hash of all the revisioned files, will be written to `build/assets/rev-version.json`.\n\n```json\n{\n  \"hash\": \"c969a1154f2a5c0689d8ec4b0eafd584\",\n  \"timestamp\": \"2014-10-11T12:13:48.466Z\"\n}\n```\n\n\n## Options\n```js\ngulp.src('dist/**')\n  .pipe(RevAll.revision({ options }))\n```\n\n#### fileNameVersion\nType: `String`<br/>\nDefault: `rev-version.json`<br />\nSet the filename of the file created by revAll.versionFile()<br/>\n\n#### fileNameManifest\nSet the filename of the file created by revAll.manifestFile()<br/>\nType: `String`<br/>\nDefault: `rev-manifest.json`\n\n#### includeFilesInManifest\nAdd only specific file types to the manifest file<br/>\nType: `Array of strings`<br/>\nDefault: `['.css', '.js']`\n\n#### dontGlobal\n\nDon't rename, search or update refrences in files matching these rules<br/>\nType: `Array of (Regex and/or String)`<br/>\nDefault: `[ /^\\/favicon.ico$/ ]`<br/>\n\n#### dontRenameFile\nDon't rename files matching these rules<br/>\nType: `Array of (Regex and/or String)`<br/>\nDefault: `[]`\n\n#### dontUpdateReference\nDon't update references matching these rules<br/>\nType: `Array of (Regex and/or String)`<br/>\nDefault: `[]`\n\n#### dontSearchFile\nDon't search for references in files matching these rules<br/>\nType: `Array of (Regex and/or String)`<br/>\nDefault: `[]`\n\nIn some cases, you may not want to rev your `*.html` files:\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({ dontRenameFile: [/^\\/favicon.ico$/g, '.html'] }))\n    .pipe(gulp.dest('cdn'))\n\n});\n```\n\nEvery html file except the root `/index.html` file:\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({ dontRenameFile: [/^\\/favicon.ico$/g, /^\\/index.html/g] })))\n    .pipe(gulp.dest('cdn'))\n\n});\n```\n\n#### hashLength\nChange the length of the hash appended to the end of each revisioned file (use `transformFilename` for more complicated scenarios).<br/>\nType: `hashLength`<br/>\nDefault: `8`<br/>\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({ hashLength: 4 }))\n    .pipe(gulp.dest('cdn'))\n\n});\n```\n\n#### prefix\nPrefixes absolute references with a string (use `transformPath` for more complicated scenarios). Useful for adding a full url path to files.<br/>\nType: `prefix`<br/>\nDefault: `none`<br/>\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({ prefix: 'http://1234.cloudfront.net/' }))\n    .pipe(gulp.dest('cdn'))\n\n});\n```\n\n#### transformPath\nSpecify a function to transform the reference path. Useful in instances where the local file structure does not reflect what the remote file structure will be.<br/>\nType: `function (rev, source, path)`<br/>\nDefault: `none`<br/>\n\nThe function takes three arguments:\n  - `rev` - revisioned reference path\n  - `source` - original reference path\n  - `path` - path to the file\n\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({\n      transformPath: function (rev, source, path) {\n      // on the remote server, image files are served from `/images`\n      return rev.replace('/img', '/images');\n      }\n    }))\n    .pipe(gulp.dest('cdn'))\n\n});\n```\n\n#### transformFilename\nIf the default naming convention does not suite your needs, you can specify a custom filename transform. <br/>\nType: `function (file, hash)`<br/>\nDefault: `none`<br/>\n\nThe function takes one argument:\n  - `file` - file to be revisioned\n  - `hash` - calculated hash of the file\n\n```js\ngulp.task('default', function () {\n\n  gulp\n    .src('dist/**')\n    .pipe(RevAll.revision({\n      transformFilename: function (file, hash) {\n        var ext = path.extname(file.path);\n        return hash.substr(0, 5) + '.'  + path.basename(file.path, ext) + ext; // 3410c.filename.ext\n      }\n    }))\n    .pipe(gulp.dest('cdn'))\n    \n});\n```\n\n#### debug\nIf you set this options to true, verbose logging will be emitted to console.<br/>\nType: `Boolean`<br/>\nDefault: `false`<br/>\n\n## Annotater & Replacer\n\nIn some cases, false-positives may occur.  Strings that are similar to a file reference may be incorrectly replaced.<br/>\n\nIn the example below, the 2nd instance of 'xyz' is not reference to the file xyz.js:\n\n```js\nrequire('xyz');\n\nangular.controller('myController', ['xyz', function(xyz) {\n   ...\n}]);\n```\n\nIt will still however be replaced resulting in file corruption:\n\n```js\nrequire('xyz.123');\n\nangular.controller('myController', ['xyz.123', function(xyz) {\n   ...\n}]);\n```\n\nThis behaviour can be avoided by passing custom ```annotator``` and ```replacer``` functions in as options.\n\n### Annotator\n\nThe annotator function is called with the original file content and path.\nAnnotator function should return a list of objects that contain fragments of the file content in order.\nYou may split the file up into as many fragments as necessary and attach any other metadata to the fragments.\nThe file will be reassembled in order. <br/>\n\nThe default annotator returns one fragment with no annotations:\n\n```js\noptions.annotator = function(contents, path) {\n  var fragments = [{'contents': contents}];\n  return fragments;\n};\n```\n\n### Replacer\n\nThe replacer function's job is to replace references to revisioned files. The paremeters are as follows:<br/>\n\n```fragment```: a file fragment as created in the annotator function.<br/>\n```replaceRegExp```: parameter is a regular expression that can be used to match the part of the fragement to be replaced. The regular expression has 4 capture groups. $1 & $4 are what precedes and follows the reference. $2 is the file path without the extension, and $3 is the file extension.<br/>\n```newReference```: what gulp-rev-all wants to replace the file path without the extension ($2) with.<br/>\n```referencedFile```: contains additional properties of the file reference thats being replaced. See the 'Additional Properties' section for more information.<br/>\n\nThe default replacer function is as follows:\n\n```js\noptions.replacer = function(fragment, replaceRegExp, newReference, referencedFile) {\n   fragment.contents = fragment.contents.replace(replaceRegExp, '$1' + newReference + '$3$4');\n};\n```\n\nYou can overide the default annotator and replacer to change the behaviour of gulp-rev-all and deal with problematic edge cases.\n\n## Additional Properties\n\n### file.revPathOriginal \nThe original full path of the file, before revisioning.\n\n### file.revFilenameOriginal\nThe original filename less the file extension, before revisioning.\n\n### file.revFilenameExtOriginal\nThe original file extension, before revisioning.\n\n### file.revHashOriginal\nThe original hash of the asset before any calculations by `gulp-rev-all`.\n\n### file.revHash\nThe hash of the asset as calculated by `gulp-rev-all`, you can use this for customizing the file renaming, or for building different manifest formats.\n\n\n## Tips\n\nMake sure to set the files to [never expire](http://developer.yahoo.com/performance/rules.html#expires) for this to have an effect.\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © [Joshua Bellamy-Henn](http://www.joshuabellamyhenn.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/cocos-creator/gulp-rev-all.git"
  },
  "scripts": {
    "test": "mocha test.js"
  },
  "version": "0.9.8"
}
