{
  "_args": [
    [
      {
        "raw": "electron-protocols@^1.0.4",
        "scope": null,
        "escapedName": "electron-protocols",
        "name": "electron-protocols",
        "rawSpec": "^1.0.4",
        "spec": ">=1.0.4 <2.0.0",
        "type": "range"
      },
      "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/electron-profile"
    ]
  ],
  "_cnpm_publish_time": 1492574673833,
  "_from": "electron-protocols@^1.0.4",
  "_hasShrinkwrap": false,
  "_id": "electron-protocols@1.0.4",
  "_location": "/electron-protocols",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/electron-protocols-1.0.4.tgz_1492574671873_0.8741659442894161"
  },
  "_npmUser": {
    "name": "johnnywu",
    "email": "KarasAya@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-protocols@^1.0.4",
    "scope": null,
    "escapedName": "electron-protocols",
    "name": "electron-protocols",
    "rawSpec": "^1.0.4",
    "spec": ">=1.0.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/electron-profile"
  ],
  "_resolved": "http://registry.npm.taobao.org/electron-protocols/download/electron-protocols-1.0.4.tgz",
  "_shasum": "9d5aef1153379e6bfebdc274171acf49127994d1",
  "_shrinkwrap": null,
  "_spec": "electron-protocols@^1.0.4",
  "_where": "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/electron-profile",
  "author": {
    "name": "jwu"
  },
  "bugs": {
    "url": "https://github.com/electron-utils/electron-protocols/issues"
  },
  "dependencies": {
    "electron-platform": "^1.2.0"
  },
  "description": "Manage file protocols in Electron",
  "devDependencies": {
    "electron": "^1.6.2",
    "mocha": "^3.2.0",
    "spectron": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9d5aef1153379e6bfebdc274171acf49127994d1",
    "size": 87076,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/electron-protocols/download/electron-protocols-1.0.4.tgz"
  },
  "gitHead": "05b2b9621308ae8da3691af1f649a2599068d956",
  "homepage": "https://github.com/electron-utils/electron-protocols",
  "keywords": [
    "Electron",
    "Protocol"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "johnnywu",
      "email": "KarasAya@gmail.com"
    }
  ],
  "name": "electron-protocols",
  "optionalDependencies": {},
  "publish_time": 1492574673833,
  "readme": "# electron-protocols\n\n[![Linux Build Status](https://travis-ci.org/electron-utils/electron-protocols.svg?branch=master)](https://travis-ci.org/electron-utils/electron-protocols)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/rb2koei7jtsgnfyh?svg=true)](https://ci.appveyor.com/project/jwu/electron-protocols)\n[![Dependency Status](https://david-dm.org/electron-utils/electron-protocols.svg)](https://david-dm.org/electron-utils/electron-protocols)\n[![devDependency Status](https://david-dm.org/electron-utils/electron-protocols/dev-status.svg)](https://david-dm.org/electron-utils/electron-protocols#info=devDependencies)\n\nManage file protocols in Electron\n\n## Install\n\n```bash\nnpm install --save electron-protocols\n```\n\nRun the example:\n\n```\nnpm start example\n```\n\n## Usage\n\nFirst register your protocol in main process before `app.on('ready')`:\n\n**main process**\n\n```javascript\nconst protocols = require('electron-protocols');\nprotocols.register('app', protocols.basepath(app.getAppPath()));\n```\n\nThen you can use `protocols.path` to map your protocol to a file path:\n\n**renderer/main process**\n\n```javascript\nconst protocols = require('electron-protocols');\n\n// return the module in ${app.getAppPath()}/my/module.js\nconst myModule = require(protocols.path('app://my/module.js'));\n```\n\nAlso, you are free to use protocol in html in renderer process:\n\n```html\n  <img src=\"app://my/image.png\" />\n  <script src=\"app://my/script.js\" />\n```\n\n## FAQ\n\n### What is the benefit to register again in renderer process?\n\nIt will speed up the search of `protocols.path` by skip calling the remote (ipc-sync) functions.\n\n## API\n\n### Methods\n\n### protocols.register(protocol, fn)\n\n  - `protocol` string\n  - `fn` function\n\nRegister a protocol so that {@link Editor.url} can use it to convert an url to the filesystem path.\nThe `fn` accept an url Object via [url.parse](https://nodejs.org/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost)\n\nExample:\n\n```javascript\nconst {app} = require('electron');\nconst protocols = require('electron-protocols');\nconst path = require('path');\n\nprotocols.register('app', uri => {\n  let base = app.getAppPath();\n  if ( uri.pathname ) {\n    return path.join( base, uri.host, uri.pathname );\n  }\n  return path.join( base, uri.host );\n});\n```\n\n### protocols.path(url)\n\n  - `url` string\n\nConvert a url by its protocol to a filesystem path. This function is useful when you try to get\nsome internal file. You can use `protocols.register` to register and map your filesystem path to url.\n\nExample:\n\n```javascript\n// it will return \"{your-app-path}/foobar/foobar.js\"\nprotocols.path('app://foobar/foobar.js');\n```\n\n### protocols.basepath(base)\n\n  - `base` string\n\nA function help you register protocol by `base` path you provide.\n\nExample:\n\n```javascript\nprotocols.register('app', protocols.basepath(app.getAppPath()));\n```\n\n## License\n\nMIT Â© 2017 Johnny Wu\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-utils/electron-protocols.git"
  },
  "scripts": {
    "start": "electron",
    "test": "mocha test/*.spec.js"
  },
  "version": "1.0.4"
}
