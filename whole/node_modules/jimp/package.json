{
  "_args": [
    [
      {
        "raw": "jimp@0.2.5",
        "scope": null,
        "escapedName": "jimp",
        "name": "jimp",
        "rawSpec": "0.2.5",
        "spec": "0.2.5",
        "type": "version"
      },
      "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app"
    ]
  ],
  "_cnpm_publish_time": 1440880485951,
  "_from": "jimp@0.2.5",
  "_hasShrinkwrap": false,
  "_id": "jimp@0.2.5",
  "_location": "/jimp",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "oliver.moran",
    "email": "oliver@nth-iteration.ie"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {
    "meow": "3.7.0",
    "read-chunk": "1.0.1"
  },
  "_requested": {
    "raw": "jimp@0.2.5",
    "scope": null,
    "escapedName": "jimp",
    "name": "jimp",
    "rawSpec": "0.2.5",
    "spec": "0.2.5",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/jimp/download/jimp-0.2.5.tgz",
  "_shasum": "fc16a93ed95ff2ff532adf69d90c7b4d55250158",
  "_shrinkwrap": null,
  "_spec": "jimp@0.2.5",
  "_where": "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app",
  "author": {
    "name": "Oliver Moran",
    "email": "oliver.moran@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/oliver-moran/jimp/issues"
  },
  "dependencies": {
    "bmp-js": "0.0.1",
    "file-type": "^2.6.0",
    "jpeg-js": "^0.1.1",
    "mime": "^1.3.4",
    "pngjs2": "^1.0.0",
    "read-chunk": "^1.0.1",
    "stream-to-buffer": "^0.1.0"
  },
  "description": "An image processing library written entirely in JavaScript (i.e. zero external or native dependencies).",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "fc16a93ed95ff2ff532adf69d90c7b4d55250158",
    "size": 730861,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/jimp/download/jimp-0.2.5.tgz"
  },
  "gitHead": "6a3123ebcb2e1edde1779aa8947d667dc26ad8bd",
  "homepage": "https://github.com/oliver-moran/jimp#readme",
  "keywords": [
    "image",
    "image processing",
    "image manipulation",
    "png",
    "jpg",
    "jpeg",
    "bmp",
    "resize",
    "scale",
    "crop"
  ],
  "license": "MIT",
  "main": "jimp.js",
  "maintainers": [
    {
      "name": "oliver.moran",
      "email": "oliver@nth-iteration.ie"
    }
  ],
  "name": "jimp",
  "optionalDependencies": {},
  "publish_time": 1440880485951,
  "readme": "# Jimp #\n\nThe \"JavaScript Image Manipulation Program\" :-)\n\nAn image processing library for Node written entirely in JavaScript, with zero external or native dependencies.\n\nExample usage:\n\n```js\nvar Jimp = require(\"jimp\");\n\n// open a file called \"lenna.png\"\nvar lenna = new Jimp(\"lenna.png\", function (err, image) {\n    this.resize(512, 512) // resize\n        .write(\"lenna-small.png\") // save\n        .quality(60) // set JPEG quality\n        .write(\"lenna-small.jpg\") // save as JPEG\n        .greyscale() // set greyscale\n        .write(\"lena-small-bw.png\") // save again\n        .crop(128, 192, 256, 128) // crop\n        .write(\"lena-small-bw-cropped.png\"); // save again\n});\n```\n\n## Basic usage ##\n\nThe Jimp constructor takes two arguments, the path to a PNG, JPEG or BMP image and a Node-style callback:\n\n```js\nvar image = new Jimp(\"./path/to/image.jpg\", function (err, image) {\n    // this is the image\n});\n```\n\nOnce the callback has fired, the following methods can be called on the image:\n\n```js\nimage.crop( x, y, w, h ); // crop to the given region\nimage.invert(); // invert the image colours\nimage.flip( horz, vert); // flip the image horizontally or vertically\nimage.gaussian( r ); // Gaussian blur the image by r pixels (VERY slow)\nimage.blur( r ); // fast blur the image by r pixels\nimage.greyscale(); // remove colour from the image\nimage.sepia(); // apply a sepia wash to the image\nimage.opacity( f ); // multiply the alpha channel by each pixel by the factor f, 0 - 1\nimage.resize( w, h ); // resize the image\nimage.scale( f ); // scale the image by the factor f\nimage.rotate( deg ); // rotate the image clockwise by a number of degrees (rounded to multiples of 90)\nimage.blit( src, x, y ); // blit the image with another Jimp image at x, y\nimage.composite( src, x, y ); // composites another Jimp image over this iamge at x, y\nimage.brightness( val ); // adjust the brighness by a value -1 to +1\nimage.contrast( val ); // adjust the contrast by a value -1 to +1\nimage.posterize( n ); // apply a posterization effect with n level\nimage.mask( src, x, y ); // masks the image with another Jimp image at x, y using average pixel value\nimage.dither565(); // ordered dithering of the image and reduce color space to 16-bits (RGB565)\n```\n\n(Contributions of more methods are welcome!)\n\nThe image can be written to disk in PNG, JPEG or BMP format (determined by the file extension) using:\n\n```js\nimage.write( path, cb ); // Node-style callback will be fired when write is successful\n```\n\nThe quality of saved JPEGs can be set with:\n\n```js\nimage.quality( n ); // set the quality of saved JPEG, 0 - 100\n```\n\n## Cloning images ##\n\nTo clone a Jimp image, you can use:\n\n```js\nimage.clone(); // returns the clone\n```\n\nThe Jimp constructor can also be called using an existing image create a clone of that image:\n\n```js\nvar clone = new Jimp(image, function (err, clone) {\n    // this is the clone\n});\n```\n\n## Working with Buffers ##\n\nA PNG, JPEG or BMP binary Buffer of an image (e.g. for storage in a database) can to got using:\n\n```js\nimage.getBuffer( mime, cb ); // Node-style callback wil be fired with result\n```\n\nFor convenience, supported MIME types are available as static properties:\n\n```js\nJimp.MIME_PNG; // \"image/png\"\nJimp.MIME_JPEG; // \"image/jpeg\"\nJimp.BMP; // \"image/bmp\"\n```\n\nThe Jimp constructor can also be called passing a valid Buffer as the first argument to the Jimp constructor:\n\n```js\nvar image = new Jimp(buffer, function (err, image) {\n    // this is the image\n});\n```\n\n## Direct manipulation ##\n\nJimp enables low-level manipulation of images in memory through the bitmap property of each Jimp object:\n\n```js\nimage.bitmap.data; // a Buffer of the raw bitmap data\nimage.bitmap.width; // the width of the image\nimage.bitmap.height // the height of the image\n```\n\nThis data can be manipulated directly but remember: garbage in, garbage out.\n\nA helper method is available to scan a region of the bitmap:\n\n```js\nimage.scan(x, y, w, h, cb); // scan a given region of the bitmap and call cb on every pixel\n```\n    \nExample usage:\n\n```js\nimage.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n    // x, y is the position of this pixel on the image\n    // idx is the position start position of this rgba tuple in the bitmap Buffer\n    // this is the image\n    \n    var red = this.bitmap.data[idx];\n    var green = this.bitmap.data[idx+1];\n    var blue = this.bitmap.data[idx+2];\n    var alpha = this.bitmap.data[idx+3];\n    \n    // rgba values run from 0 - 255\n    // e.g. this.bitmap.data[idx] = 0; // removes red from this pixel\n});\n```\n\nIf you want to begin with an empty Jimp image, you can call the Jimp constructor passing the width and height of the image to create:\n\n```js\nvar image = new Jimp(256, 256, function (err, image) {\n    // this image is 256 x 256, every pixel is set to 0x0\n});\n```\n\n## Chaining or callbacks ##\n\nAll methods can be chained together, for example as follows:\n\n```js\nvar lenna = new Jimp(\"lenna.png\", function (err, image) {\n    this.greyscale().scale(0.5).write(\"lena-half-bw.png\");\n});\n```\n\nAlternatively, methods can be passed Node-style callbacks:\n\n```js\nvar lenna = new Jimp(\"lenna.png\", function (err, image) {\n    image.greyscale(function(err, image) {\n        image.scale(0.5, function (err, image) {\n            image.write(\"lena-half-bw.png\");\n        });\n    });\n});\n```\n\nThe Node-style callback pattern allows Jimp to be used with frameworks that expect or build on the Node-style callback pattern.\n\n## License ##\n\nJimp is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oliver-moran/jimp.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.2.5"
}
