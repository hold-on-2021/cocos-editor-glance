"use strict";function openNativeLogFile(){Fs.ensureFileSync(nativeLogPath),Electron.shell.openItem(nativeLogPath)}function getCocosRoot(){let e=Editor.App._profile.data;return e["use-default-cpp-engine"]?Editor.builtinCocosRoot:e["cpp-engine-path"]}function getCocosSpawnProcess(e,o){var t;let r=initCocosBin();if(r)return[r,t];e=[cocosConsoleBin].concat(e);try{if("darwin"===process.platform)t=Spawn("sh",e,o);else{let r=e.indexOf("--env"),i="COCOS_PYTHON_HOME="+Path.dirname(pyPath);r>=0?r===e.length-1?e.push(i):e[r+1]+=";"+i:(e.push("--env"),e.push(i)),t=Spawn(pyPath,e,o)}}catch(e){r=e}return{error:r,child:t}}function initCocosBin(){return cocosRoot=getCocosRoot(),console.log("Cocos2dx root: "+cocosRoot),-1!==cocosRoot.indexOf(" ")?new Error(`Cocos2dx root [${cocosRoot}] can't include space.`):(cocosConsoleRoot=Path.join(cocosRoot,"tools/cocos2d-console/bin"),cocosConsoleBin="darwin"===process.platform?Path.join(cocosConsoleRoot,"cocos"):Path.join(cocosConsoleRoot,"cocos.py"),null)}function initCocosEnv(e){function o(e,o){return o?Fs.existsSync(o)?null:new Error(`Can't find [${e}] path: ${o}`):new Error(`[${e}] is empty, please set [${e}] in Preferences.`)}e=e||{};let t=Editor.App._profile.data;showLogInConsole=t["show-console-log"];let r=initCocosBin();if(r)return r;let i=e.antRoot||t["ant-root"],n=e.ndkRoot||t["ndk-root"],s=e.androidSDKRoot||t["android-sdk-root"];androidStudio=e.androidStudio,env={COCOS_FRAMEWORKS:Path.join(cocosRoot,"../"),COCOS_X_ROOT:cocosRoot,COCOS_CONSOLE_ROOT:cocosConsoleRoot,ANT_ROOT:i,NDK_ROOT:n,ANDROID_SDK_ROOT:s},envStr="";for(let e in env)""!==envStr&&(envStr+=";"),envStr+=`${e}=${env[e]}`;if(console.log(`native environment string : ${envStr}`),r=o("Cocos Console Root",cocosConsoleRoot),r)return r;if(!Fs.existsSync(cocosConsoleBin))return new Error(`Can't find Cocos Console Bin: ${cocosConsoleBin}`);if("android"===platform){if(r=o("NDK Root",n),r)return r;if(r=o("Android SDK Root",s),r)return r;if(r=o("ANT Root",i),r)return r;if(!("win32"!==process.platform||process.env.JAVA_HOME&&Fs.existsSync(process.env.JAVA_HOME)))return new Error("Please make sure java is installed and JAVA_HOME is in your environment")}return null}function initSettings(e,o){if(platform=e.platform,template=e.template,!template)return o&&o(new Error("Template is empty, please select a template.")),void 0;buildPath=e.buildPath,dest=e.dest,projectName=e.projectName||e.title||Path.basename(e.project),packageName=e.packageName||"com.fireball."+projectName,debug=e.debug,useDebugKeystore=e.useDebugKeystore,keystorePath=useDebugKeystore?Editor.url("unpack://static/build-templates/native/debug.keystore"):e.keystorePath,"win32"===process.platform&&(keystorePath=keystorePath.replace(/\\/g,"/")),keystorePassword=useDebugKeystore?123456:e.keystorePassword,keystoreAlias=useDebugKeystore?"debug_keystore":e.keystoreAlias,keystoreAliasPassword=useDebugKeystore?123456:e.keystoreAliasPassword;let t=initCocosEnv(e);return t?(o&&o(t),void 0):(t=checkKeystoreSettings(),t?(o&&o(t),void 0):(Async.series([e=>{if("win32"===process.platform)return e(),void 0;try{let o,t=Spawn("python",["-V"]);t.stderr.on("data",function(e){let o=e.toString();"3"===(o=o.replace("Python ","").replace("\n",""))[0]?Editor.warn(`Checked Python Version [${o}], please use python 2.x.x version. Recommend [2.7.5] version`):Editor.log(`Checked Python Version [${o}]`)}),t.on("error",function(){o=new Error("Can't find python, please install python or check your environment")}),t.on("close",function(){e(o)})}catch(o){e(new Error("Can't find python, please install python or check your environment"))}},e=>{let o=getCocosSpawnProcess(["-v"]);if(o.error)return e(o.error);let t=o.child;t.stdout.on("data",function(e){cocosConsoleVersion=e.toString()}),t.stderr.on("data",function(e){Editor.failed(e.toString())}),t.on("close",function(){e()}),t.on("error",function(o){e(o)})},e=>{let o=Path.join(cocosConsoleRoot,"../../../"),t=Path.join(o,"version"),r=Path.join(o,"cocos/cocos2d.cpp"),i=Path.join(o,"frameworks/js-bindings/bindings/manual/ScriptingCore.h");if(Fs.existsSync(t))cocosEngineVersion=Fs.readFileSync(t,"utf8");else{let e=null,o=null;if(Fs.existsSync(r)?(e=r,o='.*return[ \t]+"(.*)";'):Fs.existsSync(i)&&(e=i,o='.*#define[ \t]+ENGINE_VERSION[ \t]+"(.*)"'),e){let t=Fs.readFileSync(e,"utf8").match(o);t&&(cocosEngineVersion=t[1])}}if(cocosEngineVersion){let e=cocosEngineVersion.match("([0-9]+)[.]([0-9]+)");e&&(cocosEngineMajorVersion=parseInt(e[1]),cocosEngineMinorVersion=parseInt(e[2]))}e()}],e=>{o&&o(e)}),void 0))}function checkKeystoreSettings(){return"android"!==platform||useDebugKeystore?null:keystorePath?Fs.existsSync(keystorePath)?keystorePassword?keystoreAlias?keystoreAliasPassword?null:new Error("Keystore Alias Password is empty, please set Keystore Alias Password"):new Error("Keystore Alias is empty, please set Keystore Alias"):new Error("Keystore Password is empty, please set Keystore Password"):new Error(`Keystore Path [${keystorePath}] is not exists, please check Keystore path`):new Error("Keystore Path is empty, please set Keystore path")}function getCocosConsoleConfig(e,o){let t=require("ini"),r=Path.join(e,"cocos2d.ini");if(!Fs.existsSync(r))return Editor.failed(`Can't find ${r}`),null;let i=t.parse(Fs.readFileSync(r,"utf-8"));i.paths.templates||(i.paths.templates="../../../templates"),i.engineMode=i.global.cocos2d_x_mode,i.templatesPath=Path.join(e,i.paths.templates);let n=Path.join(i.templatesPath,"js-template-*");i.templates=[],Globby(n,(e,t)=>{t.forEach(e=>{e=Path.normalize(e);let o=Path.basename(e);o=o.replace("js-template-",""),i.templates.push(o)}),o&&o(i)})}function getCocosTemplates(e){let o=Editor.App._profile.data;o["use-default-cpp-engine"]?(cocosRoot=Editor.builtinCocosRoot)||Editor.error("Can not find builtin cocos engine, please run 'gulp update-native'."):(cocosRoot=o["cpp-engine-path"])||Editor.error("Can not find cocos engine.");getCocosConsoleConfig(Path.join(cocosRoot,"tools","cocos2d-console","bin"),o=>{e&&e(null,o.templates)})}function getAndroidAPILevels(e){let o=Editor.App._profile.data["android-sdk-root"];if(!Fs.isDirSync(o))return e(null,[]),void 0;let t=Path.join(o,"platforms","android-*");Globby(t,(o,t)=>{let r=[];t.forEach(e=>{e=Path.normalize(e);let o=Path.basename(e);_getAPILevel(o)>=MIN_API_LEVEL&&Fs.isDirSync(e)&&r.push(o)}),e&&e(null,r)})}function getSysEncoding(e){let o="utf-8",t=Fs.readFileSync(Editor.url("unpack://utils/locale-encoding.py"));try{let r;try{r="darwin"===process.platform?Spawn("python",["-c",t]):Spawn(pyPath,["-c",t])}catch(o){return e&&e(o),void 0}r.stdout.on("data",function(e){let t=e.toString();t&&(o=t)}),r.stderr.on("data",function(e){Editor.failed(e.toString())}),r.on("close",function(){e&&e(null,o)}),r.on("error",function(o){e&&e(o)})}catch(t){Editor.log("Get locale encoding failed, use utf-8 encoding"),e&&e(null,o)}}function handleChildProcess(e,o,t){function r(){let r;o.logFilePath&&(Fs.ensureFileSync(o.logFilePath),r=Fs.createWriteStream(o.logFilePath,{defaultEncoding:i})),e.stdout.on("data",e=>{if(r&&r.write(e),o.disableEditorLog)return;let t;(t="win32"===process.platform?IconvLite.decode(e,i):e.toString()).length>1&&(t=t.replace(/\n*$/g,""));t.split("\n").forEach(e=>{o.prefix&&(e=o.prefix+" : "+e),Editor.log(e)})}),e.stderr.on("data",e=>{if(r&&r.write(e),o.disableEditorLog)return;let t;t="win32"===process.platform?IconvLite.decode(e,i):e.toString(),o.prefix&&(t=o.prefix+" : "+t),-1!==t.indexOf("warning")?Editor.warn(t):Editor.failed(t)}),e.on("close",(o,i)=>{r&&r.close(),t.call(e,null,o,i)}),e.on("error",function(o){t.call(e,o)})}let i="utf-8",n={logFilePath:nativeLogPath,disableEditorLog:!showLogInConsole,useSystemEncoding:!0,prefix:""};if("function"==typeof o?(t=o,o=n):o=Object.assign(n,o),o.useSystemEncoding)return getSysEncoding((e,o)=>{i=o,r()}),void 0;r()}function checkPrebuiltLibs(){if("binary"!==template)return null;let e=Path.join(cocosRoot,"prebuilt",platform);return Fs.existsSync(e)?null:new Error(`Can't find prebuilt libs for platform [${platform}]. Please compile prebuilt libs first`)}function updateAndroidConfig(e){if("android"!==platform)return;useDebugKeystore&&(keystorePath=Editor.url("unpack://static/build-templates/native/debug.keystore")),"win32"===process.platform&&(keystorePath=keystorePath.replace(/\\/g,"/"));let o=Editor.url("unpack://static/build-templates/native/ant.properties"),t=Fs.readFileSync(o,"utf-8");useDebugKeystore||(t=(t=(t=t.replace("key.store.password=123456",`key.store.password=${keystorePassword}`)).replace("key.alias=debug_keystore",`key.alias=${keystoreAlias}`)).replace("key.alias.password=123456",`key.alias.password=${keystoreAliasPassword}`)),t=t.replace("key.store=keystore_path",`key.store=${keystorePath}`);let r=Path.join(dest,"frameworks/runtime-src/proj.android/ant.properties");Fs.writeFileSync(r,t);let i=Path.join(dest,"frameworks/runtime-src/proj.android-studio/gradle.properties");if(Fs.existsSync(i)){let o=Fs.readFileSync(i,"utf-8");o=(o=(o=(o=(o=o.replace(/RELEASE_STORE_FILE=.*/,`RELEASE_STORE_FILE=${keystorePath}`)).replace(/RELEASE_STORE_PASSWORD=.*/,`RELEASE_STORE_PASSWORD=${keystorePassword}`)).replace(/RELEASE_KEY_ALIAS=.*/,`RELEASE_KEY_ALIAS=${keystoreAlias}`)).replace(/RELEASE_KEY_PASSWORD=.*/,`RELEASE_KEY_PASSWORD=${keystoreAliasPassword}`)).replace(/PROP_TARGET_SDK_VERSION=.*/,`PROP_TARGET_SDK_VERSION=${_getAPILevel(e.apiLevel)}`);let t=e.appABIs&&e.appABIs.length>0?e.appABIs.join(":"):"armeabi-v7a";o=o.replace(/PROP_APP_ABI=.*/,`PROP_APP_ABI=${t}`),Fs.writeFileSync(i,o),o="",o+=`ndk.dir=${env.NDK_ROOT}\n`,o+=`sdk.dir=${env.ANDROID_SDK_ROOT}`,Fs.writeFileSync(Path.join(Path.dirname(i),"local.properties"),o)}}function saveTempProjectInfo(e,o){let t=Path.join(dest,".cocos-project.json"),r=JSON.parse(Fs.readFileSync(t));r.projectName=e,r.packageName=o,Fs.writeFileSync(t,JSON.stringify(r,null,2))}function clearDest(){try{Del.sync(Path.join(dest,"res"),{force:!0}),Del.sync(Path.join(dest,"src"),{force:!0})}catch(e){Editor.error(e)}}function changeProjectName(){let e=Path.join(dest,".cocos-project.json");if(!Fs.existsSync(e))return Editor.error(`Can't find project json [${e}]`),void 0;let o=JSON.parse(Fs.readFileSync(e)),t=o.projectName,r=o.packageName,i=t!==projectName,n=r!==packageName;if(!i&&!n)return;let s=Path.join(dest,"cocos-project-template.json");if(!Fs.existsSync(s))return Editor.error(`Can't find template json [${s}]`),void 0;let a,l=JSON.parse(Fs.readFileSync(s)).do_add_native_support;n&&(a=(a=(a=l.project_replace_package_name.files).concat(l.project_replace_mac_bundleid.files)).concat(l.project_replace_ios_bundleid.files)).forEach(function(e){let o=Path.join(dest,e);if(!Fs.existsSync(o))return Editor.error(`Can't not find file [${e}], replace package name failed`),void 0;let t=Fs.readFileSync(o,"utf8");t=t.replace(new RegExp(r,"gm"),packageName),Fs.writeFileSync(o,t)}),i&&((a=l.project_replace_project_name.files).forEach(e=>{let o=Path.join(dest,e.replace("PROJECT_NAME",t));if(!Fs.existsSync(o))return Editor.error(`Can't not find file [${o}], replace project name failed`),void 0;let r=Fs.readFileSync(o,"utf8");r=r.replace(new RegExp(t,"gm"),projectName),Fs.writeFileSync(o,r)}),(a=l.project_rename.files).forEach(e=>{let o=Path.join(dest,e.replace("PROJECT_NAME",t));if(!Fs.existsSync(o))return Editor.error(`Can't not find file [${o}], replace project name failed`),void 0;let r=Path.join(dest,e.replace("PROJECT_NAME",projectName));Fs.renameSync(o,r)})),o.projectName=projectName,o.packageName=packageName,Fs.writeFileSync(e,JSON.stringify(o,null,2))}function updateOrientation(e,o){const t=require("plist");let r=Path.join(dest,"frameworks/runtime-src/proj.ios_mac/ios/Info.plist");if(Fs.existsSync(r)){let o=Fs.readFileSync(r,"utf8"),i=t.parse(o),n=[];e.landscapeRight&&n.push("UIInterfaceOrientationLandscapeRight"),e.landscapeLeft&&n.push("UIInterfaceOrientationLandscapeLeft"),e.portrait&&n.push("UIInterfaceOrientationPortrait"),e.upsideDown&&n.push("UIInterfaceOrientationPortraitUpsideDown"),i.UISupportedInterfaceOrientations=n,o=t.build(i),Fs.writeFileSync(r,o)}let i=[Path.join(dest,"frameworks/runtime-src/proj.android/AndroidManifest.xml"),Path.join(dest,"frameworks/runtime-src/proj.android-studio/app/AndroidManifest.xml")].filter(e=>Fs.existsSync(e));for(let t=0,r=i.length;t<r;t++){let r=i[t],n=r.indexOf("proj.android-studio")>=0,s='android:screenOrientation="unspecified"';if(e.landscapeRight&&e.landscapeLeft&&e.portrait&&e.upsideDown)s='android:screenOrientation="fullSensor"';else if(e.landscapeRight&&!e.landscapeLeft)s='android:screenOrientation="landscape"';else if(!e.landscapeRight&&e.landscapeLeft)s='android:screenOrientation="reverseLandscape"';else if(e.landscapeRight&&e.landscapeLeft)s='android:screenOrientation="sensorLandscape"';else if(e.portrait&&!e.upsideDown)s='android:screenOrientation="portrait"';else if(!e.portrait&&e.upsideDown){let e="reversePortrait";o<16&&!n&&(e="reversePortait"),s=`android:screenOrientation="${e}"`}else if(e.portrait&&e.upsideDown){let e="sensorPortrait";o<16&&!n&&(e="sensorPortait"),s=`android:screenOrientation="${e}"`}let a=Fs.readFileSync(r,"utf8");a=a.replace(/android:screenOrientation=\"[^"]*\"/,s),Fs.writeFileSync(r,a)}}function updateProjectPath(){let e=Path.join(dest,`frameworks/runtime-src/proj.ios_mac/${projectName}.xcodeproj/project.pbxproj`);if(Fs.existsSync(e)){let o=Fs.readFileSync(e,"utf8");o=o.replace(/\/Applications\/CocosCreator.app\/Contents\/Resources\/cocos2d-x/g,Path.resolve(cocosRoot)),Fs.writeFileSync(e,o)}else Editor.warn(`Can't find path [${e}]. Replacing project file failed`);[Path.join(dest,`frameworks/runtime-src/proj.win32/${projectName}.vcxproj`),Path.join(dest,`frameworks/runtime-src/proj.win32/${projectName}.sln`),Path.join(dest,"frameworks/runtime-src/proj.android/build-cfg.json"),Path.join(dest,"frameworks/runtime-src/proj.android-studio/build-cfg.json"),Path.join(dest,"frameworks/runtime-src/proj.android-studio/settings.gradle"),Path.join(dest,"frameworks/runtime-src/proj.android-studio/app/build.gradle"),Path.join(dest,"frameworks/runtime-src/proj.win32/build-cfg.json")].forEach(e=>{if(!Fs.existsSync(e))return Editor.warn(`Replace file [${e}] not find.`),void 0;let o=Fs.readFileSync(e,"utf8"),t=Path.resolve(cocosRoot),r=Path.basename(e);"build-cfg.json"!==r&&"settings.gradle"!==r&&"build.gradle"!==r||(t=t.replace(/\\/g,"/")),o=(o=o.replace(/\$\{COCOS_X_ROOT\}/g,t)).replace(/\$\(COCOS_X_ROOT\)/g,t),Fs.writeFileSync(e,o)})}function updateXxteaKeyInAppDelegate(e){let o=Path.join(dest,"frameworks/runtime-src/Classes/AppDelegate.cpp");if(!Fs.existsSync(o))return Editor.warn(`Can't find path [${o}]`),void 0;let t=Fs.readFileSync(o,"utf8").split("\n");for(let o=0;o<t.length;o++){-1!==t[o].indexOf("jsb_set_xxtea_key")&&(t[o]=`    jsb_set_xxtea_key("${e.xxteaKey}");`)}Fs.writeFileSync(o,t.join("\n"))}function _getAPILevel(e){let o=e.match("android-([0-9]+)$"),t=-1;return o&&(t=parseInt(o[1])),t}function checkLiteVersion(){let e=Path.join(dest,".cocos-project.json");if(!Fs.existsSync(e))return Editor.failed(`Can't find project json [${e}]`),void 0;let o=JSON.parse(Fs.readFileSync(e)).engine_version;o!==cocosEngineVersion&&Editor.failed(`Project version [${o}] not match cocos2d-x-lite version [${cocosEngineVersion}]. Please delete your build path, then rebuild project.`)}function updateShortCommand(){if("win32"===process.platform)return;[Path.join(dest,"frameworks/runtime-src/proj.android/jni/Application.mk"),Path.join(dest,"frameworks/runtime-src/proj.android-studio/app/jni/Application.mk")].forEach(e=>{let o=Fs.readFileSync(e,"utf8").split("\n");for(let e=0;e<o.length;e++){let t=o[e];t.match(/\bAPP_SHORT_COMMANDS\b.*:=.*true/)&&(o[e]="#"+t)}Fs.writeFileSync(e,o.join("\n"))})}function updateModuleDefine(e){let o=Path.join(dest,"frameworks/runtime-src/Classes/jsb_module_register.cpp");if(!Fs.existsSync(o))return Editor.failed(`Can not find file ${o}`),void 0;let t=Fs.readFileSync(o,"utf8").split("\n");for(let o=0;o<t.length;o++){let r=t[o];for(let i=0;i<nativeModules.length;i++){let n=nativeModules[i];if(-1!==r.indexOf(`#define ${n[0]}`)){-1!==e.excludedModules.indexOf(n[1])?-1===r.indexOf("//")&&(t[o]="//"+r):t[o]=r.replace(/\/\//g,"")}}}Fs.writeFileSync(o,t.join("\n"))}function build(e,o){initSettings(e,t=>{if(t=t||checkPrebuiltLibs(),t)return o&&o(t),void 0;let r=_getAPILevel(e.apiLevel);if(r=r>0?r:MIN_API_LEVEL,!Fs.existsSync(dest)){Editor.log("Creating native cocos project to ",dest);let i=Path.join(buildPath,"tempCocosProject");if(Fs.existsSync(i))try{Del.sync(i,{force:!0})}catch(t){return o&&o(t),void 0}Editor.Ipc.sendToMain("builder:state-changed","creating native project",.05);let n=getCocosSpawnProcess(["new","tempCocosProject","-l","js","-d",buildPath,"-t",template,"--env",envStr]);if(n.error)return o&&o(n.error),void 0;return handleChildProcess(n.child,(t,n)=>t?(o&&o(t),void 0):0!==n?(o&&o(new Error("Failed to create project with exitCode : "+n)),void 0):(Fs.rename(i,dest,t=>{if(t)return o&&o(t),void 0;getCocosConsoleConfig(cocosConsoleRoot,t=>{let i=Path.join(t.templatesPath,"js-template-"+template),n=Path.join(i,"cocos-project-template.json"),s=Path.join(dest,"cocos-project-template.json");Fs.copySync(n,s);try{saveTempProjectInfo("tempCocosProject","org.cocos2dx.tempCocosProject"),updateShortCommand(),changeProjectName(),updateProjectPath(template),clearDest(),updateAndroidConfig(e),updateOrientation(e.orientation,r),updateModuleDefine(e)}catch(e){return o&&o(e),void 0}o&&o()})}),void 0)),void 0}try{clearDest(),changeProjectName(),updateAndroidConfig(e),updateOrientation(e.orientation,r),checkLiteVersion(),updateModuleDefine(e)}catch(t){return o&&o(t),void 0}o&&o()})}function encryptJsFiles(e,o){initSettings(e,t=>{if(t)return o&&o(t),void 0;if(!Fs.existsSync(dest))return o&&o(new Error(`Can't find ${dest}, please first build project`)),void 0;if(!e.xxteaKey)return o&&o(new Error("xxtea key is empty.")),void 0;updateXxteaKeyInAppDelegate(e);let r=Path.join(dest,"src","**/*.js");Globby(r,(t,r)=>{if(t)return o&&o(t),void 0;r.forEach(o=>{o=Path.normalize(o);try{let t=Fs.readFileSync(o,"utf8");if(e.zipCompressJs){let o=new zip;o.file("encrypt.js",t),t=o.generate({type:"uint8array",compression:"DEFLATE"}),t=xxtea.encrypt(t,xxtea.toBytes(e.xxteaKey))}else t=xxtea.encrypt(xxtea.toBytes(t),xxtea.toBytes(e.xxteaKey));Fs.writeFileSync(Path.join(Path.dirname(o),Path.basenameNoExt(o))+".jsc",t),Del.sync(o,{force:!0})}catch(e){Editor.warn(e)}}),o&&o()})})}function stopCompile(){_compileCocosProcess&&(_killingCompileProcess=!0,TreeKill(_compileCocosProcess.pid,"SIGTERM",()=>{_killingCompileProcess=!1}),_compileCocosProcess=null)}function compile(e,o){Editor.Ipc.sendToMain("builder:state-changed","init settings",0),initSettings(e,t=>{function r(){(l+=5e-4)>.9&&(l=.9),Editor.Ipc.sendToMain("builder:state-changed","compile native",l)}if(t=t||checkPrebuiltLibs(),t)return o&&o(t),void 0;if(!Fs.existsSync(dest))return o&&o(new Error(`Can't find ${dest}, please first build project`)),void 0;Editor.Ipc.sendToMain("builder:state-changed","compile native",.1),Editor.log("Start to compile native project. Please wait..."),Editor.log(`The log file path [ ${nativeLogPath} ]`);let i=["compile","-p",platform,"-m",debug?"debug":"release","--compile-script",0,"--env",envStr],n={cwd:dest},s=MIN_API_LEVEL;if("android"===platform){if(e.androidStudio&&i.push("--android-studio"),e.apiLevel){let o=_getAPILevel(e.apiLevel);o>0&&(i.push("--ap"),i.push(e.apiLevel),s=o)}e.appABIs&&e.appABIs.length>0&&(i.push("--app-abi"),i.push(e.appABIs.join(":")))}if("win32"===platform){let o="";o="auto"===e.vsVersion?"2015":e.vsVersion,i.push("--vs"),i.push(o)}updateOrientation(e.orientation,s);let a=getCocosSpawnProcess(i,n);if(a.error)return o&&o(a.error),void 0;let l=.1;(_compileCocosProcess=a.child).stdout.on("data",()=>{r()}),_compileCocosProcess.stderr.on("data",()=>{r()}),handleChildProcess(_compileCocosProcess,(e,t,r)=>{if(e)return o&&o(e),void 0;if(_compileCocosProcess=null,0===t)Editor.Ipc.sendToMain("builder:state-changed","finish",1),Editor.log("Compile native project successfully.");else{if(!_killingCompileProcess&&"SIGTERM"!==r)return o&&o(new Error(`Compile failed. The log file path [ ${nativeLogPath} ]`)),void 0;Editor.log("Compile native project exited normal")}o&&o()})})}function run(e,o){stopRunCocos(),Editor.log("Start to run project"),initSettings(e,t=>{if(t)return o&&o(t),void 0;if(!Fs.existsSync(dest))return o&&o(new Error(`Can't find ${dest}, please first build project`)),void 0;Editor.log("Start to run project. Please wait..."),Editor.log(`The log file path [ ${nativeLogPath} ]`);let r=["run","-p",platform,"-m",debug?"debug":"release","--env",envStr,"--compile-script",0],i={cwd:dest},n=MIN_API_LEVEL;if("android"===platform){if(e.androidStudio&&r.push("--android-studio"),e.apiLevel){let o=_getAPILevel(e.apiLevel);o>0&&(r.push("--ap"),r.push(e.apiLevel),n=o)}e.appABIs&&e.appABIs.length>0&&(r.push("--app-abi"),r.push(e.appABIs.join(":")))}if("win32"===platform&&"auto"!==e.vsVersion&&(r.push("--vs"),r.push(e.vsVersion)),updateOrientation(e.orientation,n),"win32"===process.platform&&"win32"===platform){let e;e=debug?Path.join(dest,"simulator/win32",projectName+".exe"):Path.join(dest,"publish/win32",projectName+".exe");try{_runCocosProcess=Spawn(e,{},i)}catch(t){return o&&o(t),void 0}}else{let e=getCocosSpawnProcess(r,i);if(e.error)return o&&o(e.error),void 0;_runCocosProcess=e.child}handleChildProcess(_runCocosProcess,(e,t)=>e?(o&&o(e),void 0):0!==t?(o&&o(new Error(`Failed to run project. The log file path [ ${nativeLogPath} ]`)),void 0):(o&&o(),void 0))})}function stopRunCocos(){_runCocosProcess&&(TreeKill(_runCocosProcess.pid),_runCocosProcess=null)}function stopSimulator(){_previewProcess&&(TreeKill(_previewProcess.pid),_previewProcess=null)}function runSimulator(){stopSimulator();let e,o,t,r=Editor.url("unpack://static/simulator/"),i="utf-8";"darwin"===process.platform?(t=Editor.url("unpack://simulator/mac/Simulator.app"),e=Path.join(t,"Contents/MacOS/Simulator"),o=Path.join(t,"Contents/Resources")):"win32"===process.platform&&(t=Editor.url("unpack://simulator/win32"),e=Path.join(t,"Simulator.exe"),o=t);let n=Editor.url("unpack://engine/bin");[{src:Path.join(r,"project.json"),dst:Path.join(o,"project.json")},{src:Editor.url("unpack://static/preview-templates/modular.js"),dst:Path.join(o,"src/modular.js")},{src:Path.join(n,"jsb_polyfill-for-preview.js"),dst:Path.join(o,"src/jsb_polyfill.js")}].forEach(e=>{Fs.copySync(e.src,e.dst)});let s=Path.join(Editor.projectPath,"temp/internal"),a=Editor.url("unpack://static/default-assets");Del.sync(s,{force:!0}),Fs.copySync(a,s),Async.series([e=>{let t=Fs.readFileSync(Path.join(r,"main.js"),"utf-8"),i=Path.join(Editor.projectPath,"library/imports"),n=Editor.projectPath,s=Editor.QuickCompiler.getTempPath();"win32"===process.platform&&(i=i.replace(/\\/g,"/"),n=n.replace(/\\/g,"/"),s=s.replace(/\\/g,"/")),t=(t=(t=t.replace(/{libraryPath}/g,`'${i}/'`)).replace(/{rawAssetsBase}/g,`'${n}/'`)).replace(/{tempScriptsPath}/g,`'${s}/'`),Fs.writeFileSync(Path.join(o,"main.js"),t),e()},e=>{var t=Editor.isWin32?"win32":"mac";Editor.PreviewServer.query("settings.js",t,(t,r)=>{if(t)return e(t),void 0;let i=r;i=i.replace(/"?internal"?:/,'"temp/internal":'),Fs.writeFileSync(Path.join(o,"src/settings.js"),i),e()})},e=>{let t=Path.join(o,"preview-scene.json");Editor.PreviewServer.getPreviewScene(function(o){e(o)},function(o){Fs.writeFile(t,o,e)},function(o){Fs.copy(o,t,e)})},e=>{getSysEncoding((o,t)=>{i=t,e(o)})}],t=>{if(t)return Editor.failed(t),void 0;let r=["-workdir",o,"-writable-path",o,"-console","false","--env",envStr];try{_previewProcess=Spawn(e,r)}catch(t){return Editor.error(t),void 0}let n=(e,o)=>{if(e)return Editor.error(e),void 0;0===o&&(_previewProcess=null)};_previewProcess.stdout.on("data",e=>{let o;(o="win32"===process.platform?IconvLite.decode(e,i):e.toString()).length>1&&(o=o.replace(/\n*$/g,""));o.split("\n").forEach(e=>{Editor.Ipc.sendToPanel("scene","scene:print-simulator-log",e)})}),_previewProcess.on("close",(e,o)=>{n.call(_previewProcess,null,e,o)}),_previewProcess.on("error",function(e){n.call(_previewProcess,e)})})}function compilePrebuiltLibs(){let e=initCocosEnv();if(e)return Editor.error(e),void 0;let o=["gen-libs","-m","release","--env",envStr],t={cwd:cocosConsoleRoot};Editor.log(`Start to compile cocos prebuilt libs. The log file path [ ${nativeLogPath} ]`);let r=getCocosSpawnProcess(o,t);if(r.error)return Editor.error(r.error),void 0;handleChildProcess(_prebuiltProcess=r.child,(e,o)=>e?(Editor.error(e),void 0):0!==o?(Editor.error(new Error(`Failed compile cocos prebuilt libs. The log file path [ ${nativeLogPath}]`)),void 0):(Editor.log("Success compile cocos prebuilt libs."),void 0))}function stopCompilePrebuilt(){_prebuiltProcess&&(TreeKill(_prebuiltProcess.pid),_prebuiltProcess=null)}function saveKeystore(e,o){let t="keytool";if("win32"===process.platform){if(!process.env.JAVA_HOME||!Fs.existsSync(process.env.JAVA_HOME))return o&&o(new Error("Please make sure java is installed and JAVA_HOME is in your environment")),void 0;if(t=Path.join(process.env.JAVA_HOME,"bin/keytool.exe"),!Fs.existsSync(t))return o&&o(new Error(`Can't find path [${t}]. Please make sure JAVA_HOME is in your environment and exists`)),void 0}let r=e.dest;Fs.existsSync(r)&&Del.sync(r,{force:!0});let i=[];e.commonName&&i.push(`CN=${e.commonName}`),e.organizationalUnit&&i.push(`OU=${e.organizationalUnit}`),e.organization&&i.push(`O=${e.organization}`),e.locality&&i.push(`L=${e.locality}`),e.state&&i.push(`S=${e.state}`),e.country&&i.push(`C=${e.country}`),i=i.join(",");let n=["-genkey","-keyalg","RSA","-keysize","1024","-validity",e.validity,"-keystore",Path.basename(r),"-storepass",e.password,"-alias",e.alias,"-keypass",e.aliasPassword,"-dname",i];Editor.log("Creating keystore : ",n.join(" "));let s,a={cwd:Path.dirname(r)};try{s=Spawn(t,n,a)}catch(e){return o&&o(e),void 0}handleChildProcess(s,(e,t)=>e?(o&&o(e),void 0):0!==t?(o&&o(new Error("Failed to create keystore, please check the log information")),void 0):(o(),void 0))}function stop(){stopCompile(),stopRunCocos(),stopSimulator(),stopCompilePrebuilt()}const IconvLite=require("iconv-lite"),Path=require("fire-path"),Fs=require("fire-fs"),Del=require("del"),Spawn=require("child_process").spawn,TreeKill=require("tree-kill"),Async=require("async"),Os=require("os"),Electron=require("electron"),Globby=require("globby"),xxtea=require("xxtea-node"),zip=require("node-zip");let cocosConsoleVersion,cocosConsoleRoot,cocosRoot,cocosConsoleBin,env,envStr,platform,buildPath,dest,projectName,packageName,debug,template,androidStudio,useDebugKeystore,keystorePath,keystorePassword,keystoreAlias,keystoreAliasPassword,nativeLogPath=Path.join(Editor.App.home,"logs/native.log"),showLogInConsole=Editor.App._profile.data["show-console-log"],cocosEngineMajorVersion=-1,cocosEngineMinorVersion=-1,cocosEngineVersion="",pyPath=Editor.url("unpack://utils/Python27/python");const MIN_API_LEVEL=10;var nativeModules=[["USE_VIDEO","VideoPlayer"],["USE_WEBVIEW","WebView"],["USE_EDIT_BOX","EditorBox"],["USE_CREATOR_PHYSICS","Physics"],["USE_CREATOR_CAMERA","Camera"],["USE_CREATOR_GRAPHICS","Graphics"],["USE_AUDIO","AudioSource"],["USE_SPINE","Spine Skeleton"],["USE_DRAGON_BONES","DragonBones"],["USE_NET_WORK","Native NetWork"]];let _compileCocosProcess,_killingCompileProcess,_runCocosProcess,_previewProcess,_prebuiltProcess;module.exports={build:build,compile:compile,encryptJsFiles:encryptJsFiles,run:run,runSimulator:runSimulator,saveKeystore:saveKeystore,openNativeLogFile:openNativeLogFile,stopCompile:stopCompile,getCocosTemplates:getCocosTemplates,getAndroidAPILevels:getAndroidAPILevels,compilePrebuiltLibs:compilePrebuiltLibs,stop:stop,showLogInConsole:showLogInConsole,getCocosSpawnProcess:getCocosSpawnProcess,getCocosRoot:getCocosRoot};