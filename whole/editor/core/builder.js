const Path=require("fire-path"),Fs=require("fire-fs"),Globby=require("globby"),Emitter=require("events"),Async=require("async"),Winston=require("winston"),buildTask=require("./gulp-build"),buildUtils=require(Editor.url("app://editor/share/build-utils")),PlatformConfigs=require("../share/build-platforms"),DEBUG_BUILD_WORKER=!1;var Builder=Object.assign(new Emitter,{doCustomProcess(e,t,r){console.log(`Builder : do custom process [${e}]`);var i=Builder.listeners(e);if(!i||0===i.length)return r();Async.eachSeries(i,(e,r)=>{try{e(t,r)}catch(e){r(e)}},e=>{e&&Editor.error(e),r()})},_getOptionsFromCommand(e){let t=Editor.Profile.load("profile://local/builder.json"),r=Editor.Profile.load("profile://project/builder.json"),i=buildUtils.getOptions(r,t),o=Editor.Profile.load("profile://project/project.json").data;Object.assign(i,{excludedModules:o["excluded-modules"],autoCompile:!1});let s={};if("string"==typeof e){let t=e.split(";");for(let e=0,r=t.length;e<r;e++){let r=t[e].split("=");if(!r[1])continue;let o=r[0];if("boolean"==typeof i[o])try{r[1]=JSON.parse(r[1])}catch(e){Editor.error(e)}else if("number"==typeof i[o])try{r[1]=Number.parseFloat(r[1])}catch(e){Editor.error(e)}else if(Array.isArray(i[o])){let e=`{"value": ${r[1]}}`.replace(/'/g,'"');try{let t=JSON.parse(e);r[1]=t.value}catch(e){Editor.error(e)}}else if("object"==typeof i[o]){let e=r[1].replace(/'/g,'"');try{let t=JSON.parse(e);r[1]=Object.assign({},i[o],t)}catch(e){Editor.error(e)}}s[o]=r[1]}}let l=s.configPath,n={};if(l&&Fs.existsSync(l))try{n=JSON.parse(Fs.readFileSync(l,"utf8"))}catch(e){Editor.error(`Parse ${l} failed. `+e)}const d=Editor.require("app://editor/share/build-platforms");let a=s.platform||n.platform||i.platform;if(a){d[a].isNative&&(i.inlineSpriteFrames=i.inlineSpriteFrames_native)}let u=Object.assign({},i,n,s);return u.buildPath?(buildUtils.updateOptions(u),{options:u}):{error:new Error("Please specify the [buildPath] option")}},_registerCommandProgressBar(){const e=require("electron");var t=new(require("progress"))("[  :state [:bar] :percent :etas  ]",{incomplete:" ",width:40,total:100});let r=0;e.ipcMain.on("builder:state-changed",(e,i,o)=>{t.tick(100*(o-r),{state:i}),r=o})},build:function(e,t){Editor.Ipc.sendToMain("builder:state-changed","start",0);var r=e.scenes,i=r.indexOf(e.startScene);if(-1===i)return Editor.error("Failed to find start scene in scene list."),void 0;if(0!==i){var o=r[0];r[0]=r[i],r[i]=o}var s=Object.assign({},e,{project:Editor.projectPath,projectName:e.title,scenes:r,debugBuildWorker:Builder.debugWorker});Winston.normal(`Start building with options : ${JSON.stringify(buildUtils.getCommonOptions(s),null,2)}`),Async.series([e=>{Builder.doCustomProcess("build-start",buildUtils.getCommonOptions(s),e)},e=>{buildTask.startWithArgs(s,e)},e=>{Editor.Ipc.sendToMain("builder:state-changed","custom-build-process",.99),Builder.doCustomProcess("build-finished",buildUtils.getCommonOptions(s),e)}],r=>{r?(Editor.error("Build Failed: %s",r.stack||r),Editor.Ipc.sendToMain("builder:state-changed","error",1,r)):(Editor.log('Built to "'+e.dest+'" successfully'),Editor.Ipc.sendToMain("builder:state-changed","finish",1),e.includeSDKBox&&Editor.Ipc.sendToMain("sdkbox:import-query",e)),t&&t(r)})},buildCommand:function(e,t){let r=this._getOptionsFromCommand(e);if(r.error)return t(r.error);let i=r.options;this._registerCommandProgressBar(),Editor.assetdb.queryAssets(null,"scene",(e,r)=>{let o=Editor.Profile.load("profile://project/builder.json");r=(r=r.filter(e=>-1===o.data.excludeScenes.indexOf(e.uuid))).map(e=>e.uuid),i.scenes=r;let s=!!r.find(function(e){return e===i.startScene});i.startScene&&s||(r.length>0?i.startScene=r[0]:i.startScene=""),Async.series([e=>{console.log(`Start to build platform [${i.platform}]`),this.build(i,e)},e=>{let t=PlatformConfigs[i.platform];if(!1===i.autoCompile||!t.isNative||!t.useTemplate)return e();console.log(`Start to compile platform [${i.platform}]`),Editor.Ipc.sendToMain("builder:state-changed","start",0),Editor.NativeUtils.compile(i,function(t){if(t)return Editor.Ipc.sendToMain("builder:state-changed","error",1),e(t);Editor.Ipc.sendToMain("builder:state-changed","finish",1),e()})}],e=>{t(e)})})},compile(e,t){let r=e.platform;if("ios"===r||"android"===r||"mac"===r||"win32"===r)return Editor.Ipc.sendToMain("builder:state-changed","start",0),Async.series([t=>{Editor.NativeUtils.compile(e,t)},t=>{Editor.Ipc.sendToMain("builder:state-changed","custom-compile-process",.99),Builder.doCustomProcess("compile-finished",buildUtils.getCommonOptions(e),t)}],e=>{if(e)return Editor.Ipc.sendToMain("builder:state-changed","error",1),Editor.failed(e),t&&t(e),void 0;t&&t(),Editor.Ipc.sendToMain("builder:state-changed","finish",1)}),void 0;t&&t(new Error(`Not support compile platform [${r}]`))},compileCommand(e,t){let r=this._getOptionsFromCommand(e);if(r.error)return t(r.error);let i=r.options;Winston.normal(`Start compiling with options : ${JSON.stringify(buildUtils.getCommonOptions(i),null,2)}`),this._registerCommandProgressBar(),this.compile(i,t)},debugWorker:!1,buildTemplates:{}});require("./builder-anysdk").init(Builder),module.exports=Builder;