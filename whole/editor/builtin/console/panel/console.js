"use strict";const ConsoleList=require(Editor.url("packages://console/panel/list")),Manager=require(Editor.url("packages://console/panel/manager"));Editor.Panel.extend({style:"\n        @import url('app://bower_components/fontawesome/css/font-awesome.min.css');\n        #console {\n            display: flex;\n            flex-direction: column;\n            font-family: Menlo, monospace;\n        }\n        header {\n            display: flex;\n            padding: 4px;\n            position: relative;\n            padding-right: 88px;\n            flex-wrap: wrap;\n        }\n        section {\n            flex: 1;\n            border: 1px solid black;\n            box-shadow: inset 0 0 8px 2px rgba(0,0,0,0.2);\n            background: #333;\n        }\n        \n        ui-checkbox {\n            padding: 3px 4px;\n        }\n        .collapse {\n            position: absolute;\n            right: 0;\n        }\n        \n        section {\n            overflow-y: auto;\n            position: relative;\n        }\n        section .item {\n            color: #999;\n            line-height: 30px;\n            padding: 0 10px;\n            box-sizing: border-box;\n            position: absolute;\n            top: 0;\n            font-size: 14px;\n            width: 100%;\n            -webkit-user-select: initial;\n            overflow-x: scroll;\n        }\n        section .item[fold] {\n            overflow-x: hidden;\n        }\n        section .item[texture=light] {\n            background-color:#292929;\n        }\n        section .item[texture=dark] {\n            background-color:#222;\n        }\n        section .item[type=log] {\n            color: #999;\n        }\n        section .item[type=error] {\n            color: #DA2121;\n        }\n        section .item[type=warn] {\n            color: #990;\n        }\n        section .item[type=info] {\n            color: #09F;\n        }\n        section .item[type=failed] {\n            color: #DA2121;\n        }\n        section .item[type=success] {\n            color: #090;\n        }\n        section .item i {\n        }\n        section .item i.fold {\n            color: #555;\n            cursor: pointer;\n            padding: 2px;\n        }\n        section .item i.fa-caret-right {\n            padding: 2px 5px 2px 6px;\n            margin: 0 -2px;\n        }\n        \n        section div .warp {\n            display: flex;\n            font-size: inherit;\n            line-height: inherit;\n        }\n        section div .text {\n            position: relative;\n            flex: 1;\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            padding-right: 2px;\n        }\n        section div[fold] .text {\n            overflow: hidden;\n        }\n        section div .info {\n            margin-left: 25px;\n        }\n        section div[fold] .info > div {\n            display: none;\n        }\n        section div .info div {\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            line-height: 26px;\n            font-size: 13px;\n        }\n        section div .info div pre {\n            margin: 0;\n            display: inline;\n        }\n        section div[fold] .info div {\n            overflow: hidden;\n        }\n        section .item[type=error] .info div {\n            color: #A73637;\n        }\n        section .item:hover {\n            background: #353535;\n        }\n        .select-wrap {\n            display: inline-block;\n            margin-right: 5px;\n        }\n    ",template:'\n    <div id="console" class="fit">\n        \n        <header>\n            <ui-button class="red small transparent" v-on:confirm="onClear">\n                <i class="icon-block"></i>\n            </ui-button>\n            <ui-button id="openLogBtn" class="small transparent" v-on:click="onPopup">\n                <i class="icon-doc-text"></i>\n            </ui-button>\n            <ui-input v-on:change="onFilterText"></ui-input>\n            <ui-checkbox v-on:confirm="onFilterRegex">Regex</ui-checkbox>\n            <ui-select v-on:confirm="onFilterType">\n                <option value="">All</option>\n                <option value="log">Log</option>\n                <option value="success">Success</option>\n                <option value="failed">Failed</option>\n                <option value="info">Info</option>\n                <option value="warn">Warn</option>\n                <option value="error">Error</option>\n            </ui-select>\n            <div class="select-wrap">\n                <i class="fa fa-text-width" title="Font Size" style="padding: 0.5em 0.6em"></i>\n                <ui-select :value="fontsize" @change="onChangeFontSize">\n                    <option v-for="fontsize in getSizeArr(8,20)" :value="fontsize">{{ fontsize }}</option>\n                </ui-select>\n            </div>\n            <div class="select-wrap">\n                <i class="fa fa-text-height" title="Font LineHeight" style="padding: 0.5em 0.6em;margin-left:0.1em;"></i>\n                <ui-select :value="lineheight" @change="onChangeLineHeight">\n                    <option v-for="lineheight in getSizeArr(18,36)" :value="lineheight">{{ lineheight }}</option>\n                </ui-select>            \n            </div>\n            <ui-checkbox class="collapse" v-on:confirm="onCollapse" checked>Collapse</ui-checkbox>\n        </header>\n        <console-list v-bind:messages="messages" :fontsize="fontsize" :lineheight="lineheight"></console-list>\n    </div>\n    ',$:{console:"#console",openLogBtn:"#openLogBtn"},listeners:{"panel-resize"(){Manager.update()},"panel-show"(){Manager.update()}},messages:{"editor:console-log"(e,n){Manager.addItem({type:"log",message:n})},"editor:console-success"(e,n){Manager.addItem({type:"success",message:n})},"editor:console-failed"(e,n){Manager.addItem({type:"failed",message:n})},"editor:console-info"(e,n){Manager.addItem({type:"info",message:n})},"editor:console-warn"(e,n){Manager.addItem({type:"warn",message:n})},"editor:console-error"(e,n){Manager.addItem({type:"error",message:n})},"editor:console-clear"(e,n,o){if(!n)return Manager.clear();let i;if(o)try{i=new RegExp(n)}catch(e){i=new RegExp("")}else i=n;for(let e=Manager.list.length-1;e>=0;e--){let n=Manager.list[e];o?i.exec(n.title)&&Manager.list.splice(e,1):-1!==n.title.indexOf(i)&&Manager.list.splice(e,1)}Manager.update()},"console:query-last-error-log"(e){if(e.reply){for(var n=Manager.list,o=n.length-1;o>=0;){let i=n[o--];if("error"===i.type||"failed"===i.type||"warn"===i.type)return e.reply(null,i)}e.reply(null,void 0)}}},ready(){let e=this.$openLogBtn,n=this.profiles.local||{data:{},save(){Editor.warn("The console settings are problematic")}};this._vm=new Vue({el:this.$console,data:{messages:[],fontsize:n.data.fontsize||12,lineheight:n.data.lineheight||26},methods:{onClear(){Editor.Ipc.sendToMain("console:clear","^(?!.*?SyntaxError)",!0)},onPopup(){let n=e.getBoundingClientRect();Editor.Ipc.sendToPackage("console","popup-open-log-menu",n.left,n.bottom+5)},onFilterType(e){Manager.setFilterType(e.target.value)},onCollapse(e){Manager.setCollapse(e.target.checked)},onFilterRegex(e){Manager.setFilterRegex(e.target.value)},onFilterText(e){Manager.setFilterText(e.target.value)},onChangeFontSize(e){n.data.fontsize=this.fontsize=parseInt(e.target.value),n.save()},onChangeLineHeight(e){n.data.lineheight=this.lineheight=parseInt(e.target.value),Manager.itemHeight=this.lineheight,Manager.update(),n.save()},getSizeArr(e,n){let o=[];for(;e<n;)o.push(++e);return o}},components:{"console-list":ConsoleList}}),Manager.setRenderCmds(this._vm.messages,this._vm.lineheight),Editor.Ipc.sendToMain("editor:console-query",(e,n)=>{Manager.addItems(n)})},clear(){Manager.clear(),Editor.Ipc.sendToMain("console:clear")}});