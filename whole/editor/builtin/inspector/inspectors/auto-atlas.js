(()=>{"use strict";return{dependencies:["packages://inspector/share/meta-header.js"],style:"\n      .preview {\n        margin: 20px;\n      }\n\n      .title {\n        font-weight: bold;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        display: flex;\n        flex: none;\n        flex-direction: row;\n        align-items: center;\n        padding-bottom: 2px;\n        margin: 5px 10px;\n        margin-bottom: 10px;\n        border-bottom: 1px solid #666;\n        height: 24px;\n        overflow: hidden;\n      }\n\n      .image-wrapper {\n        width: 100%;\n        padding: 10px;\n        box-sizing: border-box;\n      }\n\n      .preview-img {\n        width: 100%;\n        margin-bottom: 20px;\n        border: 2px solid #666;\n      }\n\n      .image-info {\n        text-align: center;\n        padding: 2px 10px;\n        font-size: 10px;\n        font-weight: bold;\n        color: rgb(255, 255, 255);\n      }\n    ",template:`\n      <cc-meta-header\n        :target="target"\n      ></cc-meta-header>\n\n      <div class="props flex-1">\n        <div>\n          <ui-prop name="${Editor.T("AUTOATLAS.max_width")}" type="number" v-value="target.maxWidth"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.max_height")}" type="number" v-value="target.maxHeight"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.padding")}" type="number" v-value="target.padding"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.allow_rotation")}" type="boolean" v-value="target.allowRotation"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.force_squared")}" type="boolean" v-value="target.forceSquared"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.powerOfTwo")}" type="boolean" v-value="target.powerOfTwo"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.heuristices")}" type="enum" v-value="target.heuristices">\n            <option value="BestShortSideFit">BestShortSideFit</option>\n            <option value="BestLongSideFit">BestLongSideFit</option>\n            <option value="BestAreaFit">BestAreaFit</option>\n            <option value="BottomLeftRule">BottomLeftRule</option>\n            <option value="ContactPointRule">ContactPointRule</option>\n          </ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.format")}" type="enum" v-value="target.format">\n            <option value="png">png</option>\n            <option value="jpg">jpg</option>\n            <option value="webp">webp</option>\n          </ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.quality")}" type="number" min="0" max="100" step="1" precision="0" v-value="target.quality" v-if=" target.format==='jpg' || target.format === 'webp' "></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.padding_bleed")}" tooltip="${Editor.T("AUTOATLAS.padding_bleed_info")}" type="boolean" v-value="target.paddingBleed"></ui-prop>\n          <ui-prop name="${Editor.T("AUTOATLAS.filter_unused")}" tooltip="${Editor.T("AUTOATLAS.filter_unused_warn")}">\n            <ui-checkbox class="item" v-value="target.filterUnused">\n              <i class="fa fa-exclamation-triangle fa-1" aria-hidden="true" style="color:yellow" title="${Editor.T("AUTOATLAS.filter_unused_warn")}"></i>\n            </ui-checkbox>\n          </ui-prop>\n        </div>\n\n        <div style="display:flex">\n          <ui-button class="preview flex-1" @confirm="_onPreviewClick">\n            Preview\n          </ui-button>\n        </div>\n\n        <div>\n          <div class="title">Packed Textures</div>\n\n          <div class="image-wrapper">\n            <div v-for="texture in packedTextures">\n              <div class="image-info">\n                <span class="info-name">{{texture.name}}</span>  \n                <span class="info-size">{{texture.size}}</span>\n              </div>\n              <img class="preview-img"\n                :src="texture.path"\n              ></img>\n            </div>\n          </div>\n\n          <div class="title">Unpacked Textures</div>\n\n          <div class="image-wrapper">\n            <div v-for="texture in unpackedTextures">\n              <div class="image-info">\n                <span class="info-name">{{texture.name}}</span>  \n                <span class="info-size">{{texture.size}}</span>\n              </div>\n              <img class="preview-img"\n                :src="texture.path"\n              ></img>\n            </div>\n          </div>\n        </div>\n\n        <ui-loader v-if="generating">Generating...</ui-loader>\n      </div>\n    `,props:{packedTextures:{type:Array,default:function(){return[]}},unpackedTextures:{type:Array,default:function(){return[]}},generating:!1},ready(){this._getInfo()},watch:{target:"_getInfo"},methods:{_onPreviewClick(){this.generating=!0,Editor.Ipc.sendToPanel("scene","scene:generate-texture-packer-preview-files",this.target.uuid,e=>{if(this.generating=!1,e)return Editor.error(e),this.packedTextures=[],this.unpackedTextures=[],void 0;this._getInfo()},-1)},_getInfo(){Editor.Ipc.sendToPanel("scene","scene:query-texture-packer-preview-files",this.target.uuid,(e,n)=>{n?(n.packedTextures.forEach(e=>{e.path+="?time="+Date.now()}),n.unpackedTextures.forEach(e=>{e.path+="?time="+Date.now()}),this.packedTextures=n.packedTextures,this.unpackedTextures=n.unpackedTextures):(this.packedTextures=[],this.unpackedTextures=[])})}}}})();