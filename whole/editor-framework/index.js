"use strict";require("./lib/share/polyfills");const EditorM=require("./lib/main"),Electron=require("electron"),Chalk=require("chalk"),Path=require("fire-path"),Fs=require("fire-fs"),Winston=require("winston"),Async=require("async"),app=Electron.app;process.removeAllListeners("uncaughtException"),process.on("uncaughtException",e=>{console.log(Chalk.red.inverse.bold("Uncaught Exception: ")+Chalk.red(e.stack||e))}),require("module").globalPaths.push(Path.join(app.getAppPath(),"node_modules"));const Yargs=require("yargs");let logpath;logpath="darwin"===process.platform?Path.join(app.getPath("home"),`Library/Logs/${EditorM.App.name}`):Path.join(EditorM.App.home,"logs");const logfile=Path.join(logpath,`${EditorM.App.name}.log`);Yargs.help("help").version(app.getVersion()).options({dev:{type:"boolean",global:!0,desc:"Run in development environment."},"show-devtools":{type:"boolean",global:!0,desc:"Open devtools automatically when main window loaded."},debug:{type:"number",default:3030,global:!0,desc:"Open in browser context debug mode."},"debug-brk":{type:"number",default:3030,global:!0,desc:"Open in browser context debug mode, and break at first."},lang:{type:"string",default:"",global:!0,desc:"Choose a language"},logfile:{type:"string",default:logfile,global:!0,desc:"Specific your logfile path"}}).command("test <path>","Run specific test",e=>e.usage("Command: test <path>").options({renderer:{type:"boolean",desc:"Run tests in renderer."},package:{type:"boolean",desc:"Run specific package tests."},detail:{type:"boolean",default:!1,desc:"Run test in debug mode (It will not quit the test, and open the devtools to help you debug it)."},reporter:{type:"string",default:"dot",desc:"Test reporter, default is 'dot'"}}),e=>{e._command="test"}).command("build <path>","Build specific package",e=>e.usage("Command: build <path>"),e=>{e._command="build"});const _frameworkPath=__dirname,_frameworkPackageJson=JSON.parse(Fs.readFileSync(Path.join(_frameworkPath,"package.json")));Fs.ensureDirSync(EditorM.App.home),Fs.ensureDirSync(Path.join(EditorM.App.home,"local")),Winston.setLevels({normal:0,success:1,failed:2,info:3,warn:4,error:5,fatal:6,uncaught:7});const chalkPID=Chalk.bgBlue,chalkSuccess=Chalk.green,chalkWarn=Chalk.yellow,chalkError=Chalk.red,chalkInfo=Chalk.cyan,levelToFormat={normal:e=>chalkPID(`[${process.pid}]`)+" "+e,success:e=>chalkPID(`[${process.pid}]`)+" "+chalkSuccess(e),failed:e=>chalkPID(`[${process.pid}]`)+" "+chalkError(e),info:e=>chalkPID(`[${process.pid}]`)+" "+chalkInfo(e),warn:e=>chalkPID(`[${process.pid}]`)+" "+chalkWarn.inverse.bold("Warning:")+" "+chalkWarn(e),error:e=>chalkPID(`[${process.pid}]`)+" "+chalkError.inverse.bold("Error:")+" "+chalkError(e),fatal:e=>chalkPID(`[${process.pid}]`)+" "+chalkError.inverse.bold("Fatal Error:")+" "+chalkError(e),uncaught:e=>chalkPID(`[${process.id}]`)+" "+chalkError.inverse.bold("Uncaught Exception:")+" "+chalkError(e)};app.on("window-all-closed",()=>{}),app.on("before-quit",()=>{EditorM.Window.windows.forEach(e=>{e.forceClose()})}),app.on("gpu-process-crashed",()=>{console.log(Chalk.red.inverse.bold("GPU Process Crashed!"))}),app.on("ready",()=>{EditorM.App.beforeInit&&EditorM.App.beforeInit(Yargs);let e=process.cwd(),o=process.argv.slice(1);for(let r=0;r<o.length;++r)if(Path.resolve(e,o[r])===app.getAppPath()){o.splice(r,1);break}let r=Yargs.parse(o);if(r.help)return app.quit(),void 0;let t=app.getLocale().substring(0,2);if(""!==r.lang&&(t=r.lang),Winston.remove(Winston.transports.Console),"test"!==r._command){if(Fs.ensureDirSync(Path.dirname(r.logfile)),Fs.existsSync(r.logfile))try{Fs.unlinkSync(r.logfile)}catch(e){console.log(e)}Winston.add(Winston.transports.File,{level:"uncaught",filename:r.logfile,json:!1}),console.log(Chalk.magenta("===== Initializing Editor ====="));let e=process.argv.slice(1);e=e.map(e=>`  ${e}`),console.log(Chalk.magenta(`arguments: \n${e.join("\n")}\n`))}("test"!==r._command||r.detail)&&Winston.add(Winston.transports.Console,{level:"uncaught",formatter(e){let o="";void 0!==e.message&&(o+=e.message),e.meta&&Object.keys(e.meta).length&&(o+=" "+JSON.stringify(e.meta));let r=levelToFormat[e.level];return r?r(o):o}}),EditorM.argv=r,EditorM.dev=r.dev,EditorM.lang=t,EditorM.logfile=r.logfile,EditorM.Protocol.init(EditorM),EditorM.Package.lang=t,EditorM.Package.versions=EditorM.versions,EditorM.Menu.showDev=r.dev,EditorM.Debugger.debugPort=r.debug,EditorM.Ipc.debug=r.dev,EditorM.reset(),Async.series([e=>{if(!EditorM.App.init)return EditorM.error("The `init` action was not found in your application. Please define it using the `Editor.App.Extend` function.           See https://github.com/cocos-creator/editor-framework/blob/master/docs/getting-started/define-your-app.md           for more information."),app.quit(),void 0;try{EditorM.App.init(r,e)}catch(e){return EditorM.error(e.stack||e),app.quit(),void 0}},e=>{if(!r._command)return e(),void 0;if("test"===r._command){require("./lib/tester").run(r.path,r)}else"build"===r._command},e=>{EditorM.log("Loading packages"),EditorM.loadAllPackages(e)},e=>{EditorM.log("Watching packages"),EditorM.watchPackages(e)},e=>{if(EditorM.log("Run Application"),EditorM.Window._loadWindowStates(),EditorM.connectToConsole(),r.dev&&"win32"!==process.platform&&EditorM.Debugger.startRepl(),!EditorM.App.run)return EditorM.error('\n          The `run` action was not found in your application.\n          Please define it using the `Editor.App.Extend` function.\n          See "https://github.com/cocos-creator/editor-framework/blob/master/docs/getting-started/define-your-app.md" for more information.\n        '),app.quit(),void 0;try{EditorM.App.run(),e()}catch(e){return EditorM.error(e.stack||e),app.quit(),void 0}}],e=>{e&&(EditorM.error(e.stack||e),app.quit())})}),EditorM.versions={[app.getName()]:app.getVersion(),"editor-framework":_frameworkPackageJson.version},EditorM.frameworkPath=_frameworkPath,module.exports=EditorM;