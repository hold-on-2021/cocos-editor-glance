"use strict";var Path=require("fire-path"),Fs=require("fire-fs"),_=require("lodash"),Project={};module.exports=Project,Project.create=function(r,e,n){let t=Editor.dev?Editor.url("app://"):Path.join(Editor.url("app://"),"..","..");if(Editor.log("install path: "+t),Path.contains(t,r))return n&&n(new Error(Editor.T("DASHBOARD.error_project_in_install"))),void 0;if(Fs.existsSync(r))return n&&n(new Error("The path "+r+" already exists.")),void 0;var o=Editor.url("unpack://engine"),i=JSON.parse(Fs.readFileSync(Path.join(o,"package.json")));let s={path:o,name:i.name,version:i.version,description:i.description};var a=function(e){Fs.copy(Editor.url("unpack://utils/api/creator.d.ts"),Path.join(r,"creator.d.ts"),n=>{n&&Editor.log(n),Fs.copy(Editor.url("unpack://utils/vscode-extension/jsconfig.json"),Path.join(r,"jsconfig.json"),r=>{r&&Editor.log(r),e(r)})})};if(e)Fs.copy(e,r,r=>{r&&console.log(r),a(n)});else{Fs.mkdirsSync(r),Fs.mkdirSync(Path.join(r,"settings")),Fs.mkdirSync(Path.join(r,"local")),Fs.mkdirSync(Path.join(r,"packages")),Fs.mkdirSync(Path.join(r,"assets")),Fs.mkdirSync(Path.join(r,"library"));var c={engine:s.name,packages:"packages"};Fs.writeFileSync(Path.join(r,"project.json"),JSON.stringify(c,null,2)),Fs.copySync(Editor.url("unpack://templates/hello-world/.gitignore"),Path.join(r,".gitignore")),a(n)}},Project.add=function(r){let e=Editor.App._profile.data;-1===e["recently-opened"].indexOf(r)&&e["recently-opened"].push(r),Editor.App._profile.save()},Project.remove=function(r){let e=Editor.App._profile.data;_.remove(e["recently-opened"],function(e){return e===r}),Editor.App._profile.save()},Project.check=function(r,e){if(!1===Fs.existsSync(r))return e&&e(new Error("Project not exists!")),void 0;let n=Editor.dev?Editor.url("app://"):Path.join(Editor.url("app://"),"..","..");if(Path.contains(n,r))return e&&e(new Error(Editor.T("DASHBOARD.error_project_in_install_open"))),void 0;Project.getInfo(r,function(n){if(!n)return e&&e(new Error("Can not find project.json")),void 0;if(n.error)return e&&e(new Error(n.error)),void 0;var t=Path.join(r,"settings");Fs.existsSync(t)||Fs.mkdirSync(t),t=Path.join(r,"local"),Fs.existsSync(t)||Fs.mkdirSync(t),t=Path.join(r,"packages"),Fs.existsSync(t)||Fs.mkdirSync(t),t=Path.join(r,"assets"),Fs.existsSync(t)||Fs.mkdirSync(t),t=Path.join(r,"library"),Fs.existsSync(t)||Fs.mkdirSync(t),e&&e(null,n)})},Project.getInfo=function(r,e){var n=Path.join(r,"project.json");if(!1===Fs.existsSync(n))return e&&e(),void 0;try{JSON.parse(Fs.readFileSync(n))}catch(n){return e&&e({path:r,name:Path.basename(r),engine:"unknown",error:"project.json broken: "+n.message}),void 0}e&&e({path:r,name:Path.basename(r)})};