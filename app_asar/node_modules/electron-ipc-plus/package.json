{
  "_args": [
    [
      {
        "raw": "electron-ipc-plus@^1.3.3",
        "scope": null,
        "escapedName": "electron-ipc-plus",
        "name": "electron-ipc-plus",
        "rawSpec": "^1.3.3",
        "spec": ">=1.3.3 <2.0.0",
        "type": "range"
      },
      "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/electron-profile"
    ]
  ],
  "_cnpm_publish_time": 1500019169199,
  "_from": "electron-ipc-plus@^1.3.3",
  "_hasShrinkwrap": false,
  "_id": "electron-ipc-plus@1.3.4",
  "_location": "/electron-ipc-plus",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/electron-ipc-plus-1.3.4.tgz_1500019169093_0.8732562582008541"
  },
  "_npmUser": {
    "name": "johnnywu",
    "email": "KarasAya@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-ipc-plus@^1.3.3",
    "scope": null,
    "escapedName": "electron-ipc-plus",
    "name": "electron-ipc-plus",
    "rawSpec": "^1.3.3",
    "spec": ">=1.3.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/electron-profile"
  ],
  "_resolved": "http://registry.npm.taobao.org/electron-ipc-plus/download/electron-ipc-plus-1.3.4.tgz",
  "_shasum": "ce3cf9186cc3fd6f7fbf39e3480f2c277f9887a8",
  "_shrinkwrap": null,
  "_spec": "electron-ipc-plus@^1.3.3",
  "_where": "/Users/nantas/fireball-x/fireball_1.9-release/dist/CocosCreator.app/Contents/Resources/app/node_modules/electron-profile",
  "author": {
    "name": "jwu"
  },
  "bugs": {
    "url": "https://github.com/jwu/electron-ipc-plus/issues"
  },
  "dependencies": {
    "electron-platform": "^1.2.0"
  },
  "description": "Improved IPC operations for electron",
  "devDependencies": {
    "electron": "^1.6.2",
    "mocha": "^3.2.0",
    "spectron": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ce3cf9186cc3fd6f7fbf39e3480f2c277f9887a8",
    "size": 18415,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/electron-ipc-plus/download/electron-ipc-plus-1.3.4.tgz"
  },
  "gitHead": "2460ab0b9dd2f13c9f8bceaf651a26650d2db3b5",
  "homepage": "https://github.com/jwu/electron-ipc-plus",
  "keywords": [
    "Electron",
    "ipc"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "johnnywu",
      "email": "KarasAya@gmail.com"
    }
  ],
  "name": "electron-ipc-plus",
  "optionalDependencies": {},
  "publish_time": 1500019169199,
  "readme": "# electron-ipc-plus\n\n[![Linux Build Status](https://travis-ci.org/electron-utils/electron-ipc-plus.svg?branch=master)](https://travis-ci.org/electron-utils/electron-ipc-plus)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/crnftwhvfxyldw75?svg=true)](https://ci.appveyor.com/project/jwu/electron-ipc-plus)\n[![Dependency Status](https://david-dm.org/electron-utils/electron-ipc-plus.svg)](https://david-dm.org/electron-utils/electron-ipc-plus)\n[![devDependency Status](https://david-dm.org/electron-utils/electron-ipc-plus/dev-status.svg)](https://david-dm.org/electron-utils/electron-ipc-plus#info=devDependencies)\n\nImproved IPC for Electron\n\n## Features\n\n - Enhance IPC Programming Experience\n - Allow sending ipc message to specific window\n - Allow sending ipc request and waiting for the reply in callback function\n\n## Install\n\n```bash\nnpm install --save electron-ipc-plus\n```\n\n## Run The Example\n\n```bash\nnpm start examples/${name}\n```\n\n## Usage\n\n### Send request from main process to renderer process and wait for reply.\n\n**main process**\n\n```javascript\nconst ipcPlusM = require('electron-ipc-plus');\n\nipcPlusM.sendToWin(browserWin, 'app:say-hello', 'hello renderer process!', (err, message) => {\n  console.log(`renderer replied: ${message}`);\n});\n```\n\n**renderer process**\n\n```javascript\nconst ipcPlusR = require('electron-ipc-plus');\n\nipcPlusR.on('app:say-hello', (event, message) => {\n  console.log(`main process said: ${message}`);\n\n  setTimeout(() => {\n    event.reply(null, 'hi main process!');\n  }, 500);\n});\n```\n\n### Send request from renderer process to main process and wait for reply.\n\n**renderer process**\n\n```javascript\nconst ipcPlusR = require('electron-ipc-plus');\n\nipcPlusR.sendToMain('app:say-hello', 'hello main process!', (err, message) => {\n  console.log(`main replied: ${message}`);\n});\n```\n\n**main process**\n\n```javascript\nconst ipcPlusM = require('electron-ipc-plus');\n\nipcPlusM.on('app:say-hello', (event, message) => {\n  console.log(`renderer process said: ${message}`);\n\n  setTimeout(() => {\n    event.reply(null, 'hi renderer process!');\n  }, 500);\n});\n```\n\n## FAQ\n\n### How can I know if an IPC is waiting for reply?\n\nJust check if `event.reply` exists:\n\n```javascript\nipcMain.on('app:say-hello', (event, message) => {\n  if ( event.reply ) {\n    event.reply(null, 'hi renderer process!');\n  }\n});\n```\n\n### Can I reply a message for multiple times?\n\nOnly the first reply will be handled, after that the session will be closed and the rest of replies will be ignored.\n\n### What happen when the window closed and I still waiting the reply from it.\n\nAn error with the code `'EWINCLOSED'` will be sent to your reply handler.\n\n```javascript\nipcPlus.sendToWin(win, 'app:say-hello', (err, message) => {\n  if ( err && err.code === 'EWINCLOSED' ) {\n    console.error('Window closed');\n  }\n});\n```\n\n### What happen when the reply is timed out.\n\nAn error with the code `'ETIMEDOUT'` will be sent to your reply handler.\n\n```javascript\nipcPlus.sendToWin(win, 'app:say-hello', (err, message) => {\n  if ( err && err.code === 'ETIMEDOUT' ) {\n    console.error('Target failed to reply you: timedout for 100ms');\n  }\n}, 100);\n```\n\n## Known Issues\n\n### ipcPlus.sendToWin could leave wild sessions in main process when the window reload.\n\nI try to solve this problem by the code below:\n\n```javascript\napp.on('browser-window-created', (event, browserWin) => {\n  // close all session once the window closed\n  browserWin.webContents.once('did-navigate', () => {\n    _closeAllSessionsInWin(browserWin);\n  });\n});\n```\n\nThe problem is 'did-navigate' will be triggerred at the first time we open the window and I disable the above solution and leave this to user.\nCurrently the best way to solve it is wrapping your own reload function, and manually close all sessions in that wrapped function.\n\n### Different versions of electron-ipc-plus.\n\nWhen running an Electron app that has several modules depends on different version of `electron-ipc-plus`,\nwe will receive a warning message.\n\n## API Reference\n\n  - [Module: ipcPlus (main process)](docs/ipc-main.md)\n  - [Module: ipcPlus (renderer process)](docs/ipc-renderer.md)\n\n## License\n\nMIT Â© 2017 Johnny Wu\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jwu/electron-ipc-plus.git"
  },
  "scripts": {
    "start": "electron",
    "test": "mocha test/*.spec.js"
  },
  "version": "1.3.4"
}
